
reception.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080050a8  080050a8  000060a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080052b0  080052b0  000062b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b8  080052b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000062b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052bc  080052bc  000062bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080052c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055dc  2000000c  080052cc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200055e8  080052cc  000075e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097d0  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193c  00000000  00000000  0001080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00012148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000623  00000000  00000000  00012940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aae  00000000  00000000  00012f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a346  00000000  00000000  00029a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f36  00000000  00000000  00033d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5c8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002464  00000000  00000000  000c5cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c8134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005090 	.word	0x08005090

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005090 	.word	0x08005090

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b96a 	b.w	8000e60 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	460c      	mov	r4, r1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d14e      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	458c      	cmp	ip, r1
 8000bb4:	4686      	mov	lr, r0
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	d962      	bls.n	8000c82 <__udivmoddi4+0xde>
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	4091      	lsls	r1, r2
 8000bc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bcc:	4319      	orrs	r1, r3
 8000bce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fa1f f68c 	uxth.w	r6, ip
 8000bda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be2:	fb07 1114 	mls	r1, r7, r4, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb04 f106 	mul.w	r1, r4, r6
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfa:	f080 8112 	bcs.w	8000e22 <__udivmoddi4+0x27e>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 810f 	bls.w	8000e22 <__udivmoddi4+0x27e>
 8000c04:	3c02      	subs	r4, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a59      	subs	r1, r3, r1
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c12:	fb07 1110 	mls	r1, r7, r0, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb00 f606 	mul.w	r6, r0, r6
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x94>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2a:	f080 80fc 	bcs.w	8000e26 <__udivmoddi4+0x282>
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	f240 80f9 	bls.w	8000e26 <__udivmoddi4+0x282>
 8000c34:	4463      	add	r3, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	1b9b      	subs	r3, r3, r6
 8000c3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11d      	cbz	r5, 8000c4a <__udivmoddi4+0xa6>
 8000c42:	40d3      	lsrs	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d905      	bls.n	8000c5e <__udivmoddi4+0xba>
 8000c52:	b10d      	cbz	r5, 8000c58 <__udivmoddi4+0xb4>
 8000c54:	e9c5 0100 	strd	r0, r1, [r5]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e7f5      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c5e:	fab3 f183 	clz	r1, r3
 8000c62:	2900      	cmp	r1, #0
 8000c64:	d146      	bne.n	8000cf4 <__udivmoddi4+0x150>
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xcc>
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	f0c0 80f0 	bcc.w	8000e50 <__udivmoddi4+0x2ac>
 8000c70:	1a86      	subs	r6, r0, r2
 8000c72:	eb64 0303 	sbc.w	r3, r4, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d0e6      	beq.n	8000c4a <__udivmoddi4+0xa6>
 8000c7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c80:	e7e3      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	f040 8090 	bne.w	8000da8 <__udivmoddi4+0x204>
 8000c88:	eba1 040c 	sub.w	r4, r1, ip
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa1f f78c 	uxth.w	r7, ip
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ca2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca6:	fb07 f006 	mul.w	r0, r7, r6
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x11c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x11a>
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2b4>
 8000cbe:	4626      	mov	r6, r4
 8000cc0:	1a1c      	subs	r4, r3, r0
 8000cc2:	fa1f f38e 	uxth.w	r3, lr
 8000cc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cca:	fb08 4410 	mls	r4, r8, r0, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb00 f707 	mul.w	r7, r0, r7
 8000cd6:	429f      	cmp	r7, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x148>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x146>
 8000ce4:	429f      	cmp	r7, r3
 8000ce6:	f200 80b0 	bhi.w	8000e4a <__udivmoddi4+0x2a6>
 8000cea:	4620      	mov	r0, r4
 8000cec:	1bdb      	subs	r3, r3, r7
 8000cee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf2:	e7a5      	b.n	8000c40 <__udivmoddi4+0x9c>
 8000cf4:	f1c1 0620 	rsb	r6, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cfe:	431f      	orrs	r7, r3
 8000d00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d04:	fa04 f301 	lsl.w	r3, r4, r1
 8000d08:	ea43 030c 	orr.w	r3, r3, ip
 8000d0c:	40f4      	lsrs	r4, r6
 8000d0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d12:	0c38      	lsrs	r0, r7, #16
 8000d14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d18:	fbb4 fef0 	udiv	lr, r4, r0
 8000d1c:	fa1f fc87 	uxth.w	ip, r7
 8000d20:	fb00 441e 	mls	r4, r0, lr, r4
 8000d24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d28:	fb0e f90c 	mul.w	r9, lr, ip
 8000d2c:	45a1      	cmp	r9, r4
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x1a6>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d3a:	f080 8084 	bcs.w	8000e46 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8081 	bls.w	8000e46 <__udivmoddi4+0x2a2>
 8000d44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d48:	443c      	add	r4, r7
 8000d4a:	eba4 0409 	sub.w	r4, r4, r9
 8000d4e:	fa1f f983 	uxth.w	r9, r3
 8000d52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d56:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x1d2>
 8000d66:	193c      	adds	r4, r7, r4
 8000d68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d6c:	d267      	bcs.n	8000e3e <__udivmoddi4+0x29a>
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d965      	bls.n	8000e3e <__udivmoddi4+0x29a>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d7e:	eba4 040c 	sub.w	r4, r4, ip
 8000d82:	429c      	cmp	r4, r3
 8000d84:	46ce      	mov	lr, r9
 8000d86:	469c      	mov	ip, r3
 8000d88:	d351      	bcc.n	8000e2e <__udivmoddi4+0x28a>
 8000d8a:	d04e      	beq.n	8000e2a <__udivmoddi4+0x286>
 8000d8c:	b155      	cbz	r5, 8000da4 <__udivmoddi4+0x200>
 8000d8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d92:	eb64 040c 	sbc.w	r4, r4, ip
 8000d96:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9a:	40cb      	lsrs	r3, r1
 8000d9c:	431e      	orrs	r6, r3
 8000d9e:	40cc      	lsrs	r4, r1
 8000da0:	e9c5 6400 	strd	r6, r4, [r5]
 8000da4:	2100      	movs	r1, #0
 8000da6:	e750      	b.n	8000c4a <__udivmoddi4+0xa6>
 8000da8:	f1c2 0320 	rsb	r3, r2, #32
 8000dac:	fa20 f103 	lsr.w	r1, r0, r3
 8000db0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db4:	fa24 f303 	lsr.w	r3, r4, r3
 8000db8:	4094      	lsls	r4, r2
 8000dba:	430c      	orrs	r4, r1
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd0:	0c23      	lsrs	r3, r4, #16
 8000dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd6:	fb00 f107 	mul.w	r1, r0, r7
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x24c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000de6:	d22c      	bcs.n	8000e42 <__udivmoddi4+0x29e>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d92a      	bls.n	8000e42 <__udivmoddi4+0x29e>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4463      	add	r3, ip
 8000df0:	1a5b      	subs	r3, r3, r1
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e00:	fb01 f307 	mul.w	r3, r1, r7
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x276>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e10:	d213      	bcs.n	8000e3a <__udivmoddi4+0x296>
 8000e12:	42a3      	cmp	r3, r4
 8000e14:	d911      	bls.n	8000e3a <__udivmoddi4+0x296>
 8000e16:	3902      	subs	r1, #2
 8000e18:	4464      	add	r4, ip
 8000e1a:	1ae4      	subs	r4, r4, r3
 8000e1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e20:	e739      	b.n	8000c96 <__udivmoddi4+0xf2>
 8000e22:	4604      	mov	r4, r0
 8000e24:	e6f0      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e26:	4608      	mov	r0, r1
 8000e28:	e706      	b.n	8000c38 <__udivmoddi4+0x94>
 8000e2a:	45c8      	cmp	r8, r9
 8000e2c:	d2ae      	bcs.n	8000d8c <__udivmoddi4+0x1e8>
 8000e2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e36:	3801      	subs	r0, #1
 8000e38:	e7a8      	b.n	8000d8c <__udivmoddi4+0x1e8>
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	e7ed      	b.n	8000e1a <__udivmoddi4+0x276>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e799      	b.n	8000d76 <__udivmoddi4+0x1d2>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e7d4      	b.n	8000df0 <__udivmoddi4+0x24c>
 8000e46:	46d6      	mov	lr, sl
 8000e48:	e77f      	b.n	8000d4a <__udivmoddi4+0x1a6>
 8000e4a:	4463      	add	r3, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e74d      	b.n	8000cec <__udivmoddi4+0x148>
 8000e50:	4606      	mov	r6, r0
 8000e52:	4623      	mov	r3, r4
 8000e54:	4608      	mov	r0, r1
 8000e56:	e70f      	b.n	8000c78 <__udivmoddi4+0xd4>
 8000e58:	3e02      	subs	r6, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	e730      	b.n	8000cc0 <__udivmoddi4+0x11c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  float interval = DUREE / (NB_SAMPLES - 1);
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <main+0xf8>)
 8000e70:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < NB_SAMPLES; i++) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	e057      	b.n	8000f28 <main+0xc0>
          Tmsg[i] = i * interval;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e82:	edd7 7a00 	vldr	s15, [r7]
 8000e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8a:	4a36      	ldr	r2, [pc, #216]	@ (8000f64 <main+0xfc>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	edc3 7a00 	vstr	s15, [r3]
          Lsin[i] = sin(2 * M_PI * FC * Tmsg[i]);
 8000e96:	4a33      	ldr	r2, [pc, #204]	@ (8000f64 <main+0xfc>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fafd 	bl	80004a0 <__aeabi_f2d>
 8000ea6:	a32c      	add	r3, pc, #176	@ (adr r3, 8000f58 <main+0xf0>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fb50 	bl	8000550 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	ec43 2b17 	vmov	d7, r2, r3
 8000eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8000ebc:	eef0 0a67 	vmov.f32	s1, s15
 8000ec0:	f003 f8b6 	bl	8004030 <sin>
 8000ec4:	ec53 2b10 	vmov	r2, r3, d0
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fe02 	bl	8000ad4 <__aeabi_d2f>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4925      	ldr	r1, [pc, #148]	@ (8000f68 <main+0x100>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	601a      	str	r2, [r3, #0]
          Lcos[i] = cos(2 * M_PI * FC * Tmsg[i]);
 8000edc:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <main+0xfc>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fada 	bl	80004a0 <__aeabi_f2d>
 8000eec:	a31a      	add	r3, pc, #104	@ (adr r3, 8000f58 <main+0xf0>)
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	f7ff fb2d 	bl	8000550 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	ec43 2b17 	vmov	d7, r2, r3
 8000efe:	eeb0 0a47 	vmov.f32	s0, s14
 8000f02:	eef0 0a67 	vmov.f32	s1, s15
 8000f06:	f003 f83f 	bl	8003f88 <cos>
 8000f0a:	ec53 2b10 	vmov	r2, r3, d0
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fddf 	bl	8000ad4 <__aeabi_d2f>
 8000f16:	4602      	mov	r2, r0
 8000f18:	4914      	ldr	r1, [pc, #80]	@ (8000f6c <main+0x104>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < NB_SAMPLES; i++) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3301      	adds	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b8b      	cmp	r3, #139	@ 0x8b
 8000f2c:	dda4      	ble.n	8000e78 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f000 fe0b 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f821 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 f925 	bl	8001184 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3a:	f000 f903 	bl	8001144 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f3e:	f000 f8d7 	bl	80010f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f42:	f000 f883 	bl	800104c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000f46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f4a:	4909      	ldr	r1, [pc, #36]	@ (8000f70 <main+0x108>)
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <main+0x10c>)
 8000f4e:	f000 feb1 	bl	8001cb4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f52:	bf00      	nop
 8000f54:	e7fd      	b.n	8000f52 <main+0xea>
 8000f56:	bf00      	nop
 8000f58:	4c5d390c 	.word	0x4c5d390c
 8000f5c:	410eadfb 	.word	0x410eadfb
 8000f60:	35411e79 	.word	0x35411e79
 8000f64:	20002b14 	.word	0x20002b14
 8000f68:	20002d44 	.word	0x20002d44
 8000f6c:	20002f74 	.word	0x20002f74
 8000f70:	20000118 	.word	0x20000118
 8000f74:	20000028 	.word	0x20000028

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	@ 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2230      	movs	r2, #48	@ 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 ffba 	bl	8003f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fac:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 f822 	bl	8003048 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800100a:	f000 fc39 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fa84 	bl	8003538 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001036:	f000 fc23 	bl	8001880 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	@ 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_ADC1_Init+0x98>)
 8001060:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <MX_ADC1_Init+0x9c>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_ADC1_Init+0x98>)
 8001066:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800106a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_ADC1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_ADC1_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_ADC1_Init+0x98>)
 800108e:	4a17      	ldr	r2, [pc, #92]	@ (80010ec <MX_ADC1_Init+0xa0>)
 8001090:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_ADC1_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_ADC1_Init+0x98>)
 800109a:	2201      	movs	r2, #1
 800109c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_ADC1_Init+0x98>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_ADC1_Init+0x98>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_ADC1_Init+0x98>)
 80010ae:	f000 fdbd 	bl	8001c2c <HAL_ADC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 fbe2 	bl	8001880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010bc:	2307      	movs	r3, #7
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_ADC1_Init+0x98>)
 80010ce:	f000 feeb 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010d8:	f000 fbd2 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000028 	.word	0x20000028
 80010e8:	40012000 	.word	0x40012000
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_USART2_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001128:	f002 fc26 	bl	8003978 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f000 fba5 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000d0 	.word	0x200000d0
 8001140:	40004400 	.word	0x40004400

08001144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_DMA_Init+0x3c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <MX_DMA_Init+0x3c>)
 8001154:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_DMA_Init+0x3c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2038      	movs	r0, #56	@ 0x38
 800116c:	f001 fa27 	bl	80025be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001170:	2038      	movs	r0, #56	@ 0x38
 8001172:	f001 fa40 	bl	80025f6 <HAL_NVIC_EnableIRQ>

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a25      	ldr	r2, [pc, #148]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	4812      	ldr	r0, [pc, #72]	@ (8001258 <MX_GPIO_Init+0xd4>)
 8001210:	f001 ff00 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <MX_GPIO_Init+0xd8>)
 800122c:	f001 fd6e 	bl	8002d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001230:	2320      	movs	r3, #32
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <MX_GPIO_Init+0xd4>)
 8001248:	f001 fd60 	bl	8002d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	@ 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000
 800125c:	40020800 	.word	0x40020800

08001260 <find_zero>:
//	else {
//		return -1;
//	}
//}

void find_zero(uint16_t *buffer, int buffer_length, uint16_t *new_buffer, int new_buffer_length, int indxstart){
 8001260:	b480      	push	{r7}
 8001262:	b08b      	sub	sp, #44	@ 0x2c
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
	int zero_cnt = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
	int index = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
	int msg_cnt = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

	for (int i=0 + indxstart; i < buffer_length + indxstart; i++){ // Due to the ping-pong buffering method we only use half of the ADC buffer
 800127a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	e056      	b.n	800132e <find_zero+0xce>
		if (buffer[i] < 200){
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2bc7      	cmp	r3, #199	@ 0xc7
 800128c:	d84a      	bhi.n	8001324 <find_zero+0xc4>
			zero_cnt ++;
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	3301      	adds	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
			if (zero_cnt > ZERO_LEN){ // if the sequence of zeros is long enough
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	2b64      	cmp	r3, #100	@ 0x64
 8001298:	dd46      	ble.n	8001328 <find_zero+0xc8>
				index = i - zero_cnt + 1; // find beginning of the sequence
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
				index_msg[msg_cnt]=index; // record the index of the beginning of this sequence
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	b299      	uxth	r1, r3
 80012a8:	4a38      	ldr	r2, [pc, #224]	@ (800138c <find_zero+0x12c>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				msg_cnt ++; // add 1 to the message counter
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	3301      	adds	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
				zero_cnt = 0; // reset the counter of zeros
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
				i = index+264; // advance to the next message since we know where the message begin and where its length
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80012c0:	61bb      	str	r3, [r7, #24]
				if (i >= buffer_length + indxstart)
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c6:	4413      	add	r3, r2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	db01      	blt.n	80012d2 <find_zero+0x72>
					i = buffer_length;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	61bb      	str	r3, [r7, #24]
				if (index + new_buffer_length <= buffer_length + indxstart && msg_cnt < 8) { // copies the message in the msg_buffer
 80012d2:	6a3a      	ldr	r2, [r7, #32]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	441a      	add	r2, r3
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012dc:	440b      	add	r3, r1
 80012de:	429a      	cmp	r2, r3
 80012e0:	dc22      	bgt.n	8001328 <find_zero+0xc8>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	dc1f      	bgt.n	8001328 <find_zero+0xc8>
					for (int k = 0; k < new_buffer_length; k++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e015      	b.n	800131a <find_zero+0xba>
						msgs_buffers[msg_cnt][k] = buffer[index + 132 + k];
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	8818      	ldrh	r0, [r3, #0]
 8001300:	4923      	ldr	r1, [pc, #140]	@ (8001390 <find_zero+0x130>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	228c      	movs	r2, #140	@ 0x8c
 8001306:	fb03 f202 	mul.w	r2, r3, r2
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	4602      	mov	r2, r0
 8001310:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for (int k = 0; k < new_buffer_length; k++) {
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	dbe5      	blt.n	80012ee <find_zero+0x8e>
 8001322:	e001      	b.n	8001328 <find_zero+0xc8>
						}
					}
			}
		}
		else {
			zero_cnt = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i=0 + indxstart; i < buffer_length + indxstart; i++){ // Due to the ping-pong buffering method we only use half of the ADC buffer
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	3301      	adds	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001332:	4413      	add	r3, r2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	429a      	cmp	r2, r3
 8001338:	dba2      	blt.n	8001280 <find_zero+0x20>
		}
	}
	correla = index;
 800133a:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <find_zero+0x134>)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	6013      	str	r3, [r2, #0]

	if (index + new_buffer_length <= buffer_length + indxstart) { // copies the message in the msg_buffer
 8001340:	6a3a      	ldr	r2, [r7, #32]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	441a      	add	r2, r3
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134a:	440b      	add	r3, r1
 800134c:	429a      	cmp	r2, r3
 800134e:	dc17      	bgt.n	8001380 <find_zero+0x120>
		for (int k = 0; k < new_buffer_length; k++) {
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	e010      	b.n	8001378 <find_zero+0x118>
			new_buffer[k] = buffer[index + 132 + k];
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	441a      	add	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	440b      	add	r3, r1
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	801a      	strh	r2, [r3, #0]
		for (int k = 0; k < new_buffer_length; k++) {
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	3301      	adds	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbea      	blt.n	8001356 <find_zero+0xf6>

		}
	}
}
 8001380:	bf00      	nop
 8001382:	372c      	adds	r7, #44	@ 0x2c
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20002230 	.word	0x20002230
 8001390:	20002250 	.word	0x20002250
 8001394:	20002b10 	.word	0x20002b10

08001398 <trapz>:

double trapz(double *y, double dx, int n) { // trapeze method for integration with dx=100/132=0,757 microseconds (time gap between two points)
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	ed87 0b00 	vstr	d0, [r7]
 80013a4:	60b9      	str	r1, [r7, #8]
    double integ = 0.0;
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < n - 1; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e02d      	b.n	8001414 <trapz+0x7c>
        integ += (y[i] + y[i+1]) * dx / 2.0;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7fe ff07 	bl	80001e4 <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e2:	f7ff f8b5 	bl	8000550 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f6:	f7ff f9d5 	bl	80007a4 <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001402:	f7fe feef 	bl	80001e4 <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < n - 1; i++) {
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3b01      	subs	r3, #1
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	429a      	cmp	r2, r3
 800141c:	dbcc      	blt.n	80013b8 <trapz+0x20>
    }
    return integ;
 800141e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001422:	ec43 2b17 	vmov	d7, r2, r3
}
 8001426:	eeb0 0a47 	vmov.f32	s0, s14
 800142a:	eef0 0a67 	vmov.f32	s1, s15
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	0000      	movs	r0, r0
	...

08001438 <integ>:

void integ(float *IQ, float *integIQ){
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b0cb      	sub	sp, #300	@ 0x12c
 800143c:	af00      	add	r7, sp, #0
 800143e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001442:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001446:	6018      	str	r0, [r3, #0]
 8001448:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800144c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001450:	6019      	str	r1, [r3, #0]
	int cpt=0;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	for (int i = 0; i < MSG_BUF_LEN; i += SYMBOL_LEN) {
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800145e:	e051      	b.n	8001504 <integ+0xcc>
		double integrale = 0;
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	    double sing_symb[33];
	    for (int j=0; j<33; j++){
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001472:	e020      	b.n	80014b6 <integ+0x7e>
	    	sing_symb[j]=IQ[i+j];
 8001474:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001484:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4413      	add	r3, r2
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f806 	bl	80004a0 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800149c:	f5a1 7090 	sub.w	r0, r1, #288	@ 0x120
 80014a0:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80014a4:	00c9      	lsls	r1, r1, #3
 80014a6:	4401      	add	r1, r0
 80014a8:	e9c1 2300 	strd	r2, r3, [r1]
	    for (int j=0; j<33; j++){
 80014ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014b0:	3301      	adds	r3, #1
 80014b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80014b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	ddda      	ble.n	8001474 <integ+0x3c>
	    }
	    integrale = trapz(sing_symb, 0.757e-6, SYMBOL_LEN);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2123      	movs	r1, #35	@ 0x23
 80014c4:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8001518 <integ+0xe0>
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff65 	bl	8001398 <trapz>
 80014ce:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
	    integIQ[cpt] = integrale;
 80014d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80014dc:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	18d4      	adds	r4, r2, r3
 80014e4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80014e8:	f7ff faf4 	bl	8000ad4 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	6023      	str	r3, [r4, #0]
	    cpt += 1;
 80014f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014f4:	3301      	adds	r3, #1
 80014f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	for (int i = 0; i < MSG_BUF_LEN; i += SYMBOL_LEN) {
 80014fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014fe:	3323      	adds	r3, #35	@ 0x23
 8001500:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001504:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001508:	2b8b      	cmp	r3, #139	@ 0x8b
 800150a:	dda9      	ble.n	8001460 <integ+0x28>
	}
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8001514:	46bd      	mov	sp, r7
 8001516:	bd90      	pop	{r4, r7, pc}
 8001518:	9abd6c43 	.word	0x9abd6c43
 800151c:	3ea96694 	.word	0x3ea96694

08001520 <decision>:

void  decision(){ // decision block
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
	for (int k=1; k < NB_SYM_SEQ; k++){
 8001526:	2301      	movs	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e0bb      	b.n	80016a4 <decision+0x184>
		char sym_dec[3];
		char msg_dec[2*NB_SYM];
		for (int l = 0; l < NB_SYM; l++){
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	e0a8      	b.n	8001684 <decision+0x164>
			if (tIntegI[k][l] < 0 && tIntegQ[k][l] < 0)
 8001532:	4961      	ldr	r1, [pc, #388]	@ (80016b8 <decision+0x198>)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	009a      	lsls	r2, r3, #2
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154c:	d516      	bpl.n	800157c <decision+0x5c>
 800154e:	495b      	ldr	r1, [pc, #364]	@ (80016bc <decision+0x19c>)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	009a      	lsls	r2, r3, #2
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	d508      	bpl.n	800157c <decision+0x5c>
				strcpy(sym_dec,"00");
 800156a:	4a55      	ldr	r2, [pc, #340]	@ (80016c0 <decision+0x1a0>)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	4611      	mov	r1, r2
 8001574:	8019      	strh	r1, [r3, #0]
 8001576:	3302      	adds	r3, #2
 8001578:	0c12      	lsrs	r2, r2, #16
 800157a:	701a      	strb	r2, [r3, #0]
			if (tIntegI[k][l] < 0 && tIntegQ[k][l] > 0)
 800157c:	494e      	ldr	r1, [pc, #312]	@ (80016b8 <decision+0x198>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d516      	bpl.n	80015c6 <decision+0xa6>
 8001598:	4948      	ldr	r1, [pc, #288]	@ (80016bc <decision+0x19c>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	009a      	lsls	r2, r3, #2
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd08      	ble.n	80015c6 <decision+0xa6>
				strcpy(sym_dec, "10");
 80015b4:	4a43      	ldr	r2, [pc, #268]	@ (80016c4 <decision+0x1a4>)
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	4611      	mov	r1, r2
 80015be:	8019      	strh	r1, [r3, #0]
 80015c0:	3302      	adds	r3, #2
 80015c2:	0c12      	lsrs	r2, r2, #16
 80015c4:	701a      	strb	r2, [r3, #0]
			if (tIntegI[k][l] > 0 && tIntegQ[k][l] > 0)
 80015c6:	493c      	ldr	r1, [pc, #240]	@ (80016b8 <decision+0x198>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	009a      	lsls	r2, r3, #2
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	dd16      	ble.n	8001610 <decision+0xf0>
 80015e2:	4936      	ldr	r1, [pc, #216]	@ (80016bc <decision+0x19c>)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	009a      	lsls	r2, r3, #2
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd08      	ble.n	8001610 <decision+0xf0>
				strcpy(sym_dec, "11");
 80015fe:	4a32      	ldr	r2, [pc, #200]	@ (80016c8 <decision+0x1a8>)
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	4611      	mov	r1, r2
 8001608:	8019      	strh	r1, [r3, #0]
 800160a:	3302      	adds	r3, #2
 800160c:	0c12      	lsrs	r2, r2, #16
 800160e:	701a      	strb	r2, [r3, #0]
			if (tIntegI[k][l] > 0 && tIntegQ[k][l] < 0)
 8001610:	4929      	ldr	r1, [pc, #164]	@ (80016b8 <decision+0x198>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd16      	ble.n	800165a <decision+0x13a>
 800162c:	4923      	ldr	r1, [pc, #140]	@ (80016bc <decision+0x19c>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	009a      	lsls	r2, r3, #2
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	d508      	bpl.n	800165a <decision+0x13a>
				strcpy(sym_dec, "01");
 8001648:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <decision+0x1ac>)
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	4611      	mov	r1, r2
 8001652:	8019      	strh	r1, [r3, #0]
 8001654:	3302      	adds	r3, #2
 8001656:	0c12      	lsrs	r2, r2, #16
 8001658:	701a      	strb	r2, [r3, #0]
			if (l > 0)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	dd07      	ble.n	8001670 <decision+0x150>
				strcat(msg_dec, sym_dec);
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fc51 	bl	8003f10 <strcat>
 800166e:	e006      	b.n	800167e <decision+0x15e>
			else
				strcpy(msg_dec, sym_dec);
 8001670:	f107 020c 	add.w	r2, r7, #12
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fc7d 	bl	8003f78 <strcpy>
		for (int l = 0; l < NB_SYM; l++){
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	3301      	adds	r3, #1
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b03      	cmp	r3, #3
 8001688:	f77f af53 	ble.w	8001532 <decision+0x12>
		}
		strcpy(msg_halfbuffer[k],msg_dec);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <decision+0x1b0>)
 8001692:	4413      	add	r3, r2
 8001694:	1d3a      	adds	r2, r7, #4
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fc6d 	bl	8003f78 <strcpy>
	for (int k=1; k < NB_SYM_SEQ; k++){
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	f77f af40 	ble.w	800152c <decision+0xc>
	}
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200054a4 	.word	0x200054a4
 80016bc:	20005524 	.word	0x20005524
 80016c0:	080050a8 	.word	0x080050a8
 80016c4:	080050ac 	.word	0x080050ac
 80016c8:	080050b0 	.word	0x080050b0
 80016cc:	080050b4 	.word	0x080050b4
 80016d0:	200055a4 	.word	0x200055a4

080016d4 <demod_sig2>:
	integ(I, IntegI);
	integ(Q, IntegQ);

}

void demod_sig2(uint16_t *buffer, int buffer_length, uint16_t *new_buffer, int new_buffer_length, int indxstart){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af02      	add	r7, sp, #8
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]

	find_zero(buffer, buffer_length, new_buffer, new_buffer_length, indxstart);
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fdb7 	bl	8001260 <find_zero>
	for (int k=1; k < NB_SYM_SEQ; k++){
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e06e      	b.n	80017d6 <demod_sig2+0x102>
		for (int i=0; i < new_buffer_length; i++){
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	e046      	b.n	800178c <demod_sig2+0xb8>
					tI[k][i]= (msgs_buffers[k][i]-1300)*Lcos[i]; // In-Phase signal with a 0V centered signal (may not be necessary given the signal)
 80016fe:	493a      	ldr	r1, [pc, #232]	@ (80017e8 <demod_sig2+0x114>)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	228c      	movs	r2, #140	@ 0x8c
 8001704:	fb03 f202 	mul.w	r2, r3, r2
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001710:	f2a3 5314 	subw	r3, r3, #1300	@ 0x514
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171c:	4a33      	ldr	r2, [pc, #204]	@ (80017ec <demod_sig2+0x118>)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	4930      	ldr	r1, [pc, #192]	@ (80017f0 <demod_sig2+0x11c>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	228c      	movs	r2, #140	@ 0x8c
 8001732:	fb03 f202 	mul.w	r2, r3, r2
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	edc3 7a00 	vstr	s15, [r3]
					tQ[k][i]= (msgs_buffers[k][i]-1300)*Lsin[i]; // Quadrature signal with a 0V centered signal
 8001742:	4929      	ldr	r1, [pc, #164]	@ (80017e8 <demod_sig2+0x114>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	228c      	movs	r2, #140	@ 0x8c
 8001748:	fb03 f202 	mul.w	r2, r3, r2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001754:	f2a3 5314 	subw	r3, r3, #1300	@ 0x514
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001760:	4a24      	ldr	r2, [pc, #144]	@ (80017f4 <demod_sig2+0x120>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001770:	4921      	ldr	r1, [pc, #132]	@ (80017f8 <demod_sig2+0x124>)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	228c      	movs	r2, #140	@ 0x8c
 8001776:	fb03 f202 	mul.w	r2, r3, r2
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	edc3 7a00 	vstr	s15, [r3]
		for (int i=0; i < new_buffer_length; i++){
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	3301      	adds	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbb4      	blt.n	80016fe <demod_sig2+0x2a>
				}
		integ(tI[k], tIntegI[k]);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f44f 720c 	mov.w	r2, #560	@ 0x230
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <demod_sig2+0x11c>)
 80017a0:	441a      	add	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4915      	ldr	r1, [pc, #84]	@ (80017fc <demod_sig2+0x128>)
 80017a8:	440b      	add	r3, r1
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f7ff fe43 	bl	8001438 <integ>
		integ(tQ[k], tIntegQ[k]);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f44f 720c 	mov.w	r2, #560	@ 0x230
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <demod_sig2+0x124>)
 80017be:	441a      	add	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	490e      	ldr	r1, [pc, #56]	@ (8001800 <demod_sig2+0x12c>)
 80017c6:	440b      	add	r3, r1
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fe34 	bl	8001438 <integ>
	for (int k=1; k < NB_SYM_SEQ; k++){
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	dd8d      	ble.n	80016f8 <demod_sig2+0x24>
	}
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20002250 	.word	0x20002250
 80017ec:	20002f74 	.word	0x20002f74
 80017f0:	200031a4 	.word	0x200031a4
 80017f4:	20002d44 	.word	0x20002d44
 80017f8:	20004324 	.word	0x20004324
 80017fc:	200054a4 	.word	0x200054a4
 8001800:	20005524 	.word	0x20005524

08001804 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	2120      	movs	r1, #32
 8001810:	4808      	ldr	r0, [pc, #32]	@ (8001834 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001812:	f001 fbff 	bl	8003014 <HAL_GPIO_WritePin>
//	find_training_sequence_and_copy2(adc_buf, ADC_BUF_LEN, trainingseq, traininglen, msg_buf, MSG_BUF_LEN);
//	find_training_sequence(adc_buf, ADC_BUF_LEN, trainingseq, traininglen, msg_buf, MSG_BUF_LEN);
//	find_zero(adc_buf, ADC_BUF_LEN, msg_buf, MSG_BUF_LEN);
	demod_sig2(adc_buf, ADC_BUF_LEN/2, msg_buf, MSG_BUF_LEN, 0); // fonctionne sur tout le buffer => à changer
 8001816:	2300      	movs	r3, #0
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	238c      	movs	r3, #140	@ 0x8c
 800181c:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800181e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001824:	f7ff ff56 	bl	80016d4 <demod_sig2>
	decision();
 8001828:	f7ff fe7a 	bl	8001520 <decision>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40020000 	.word	0x40020000
 8001838:	20002118 	.word	0x20002118
 800183c:	20000118 	.word	0x20000118

08001840 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af02      	add	r7, sp, #8
 8001846:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2120      	movs	r1, #32
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <HAL_ADC_ConvCpltCallback+0x34>)
 800184e:	f001 fbe1 	bl	8003014 <HAL_GPIO_WritePin>
//	find_training_sequence_and_copy2(adc_buf, ADC_BUF_LEN,trainingseq, traininglen, msg_buf, MSG_BUF_LEN);
//	find_training_sequence(adc_buf, ADC_BUF_LEN, trainingseq, traininglen, msg_buf, MSG_BUF_LEN);
//	find_zero(adc_buf, ADC_BUF_LEN, msg_buf, MSG_BUF_LEN);
	demod_sig2(adc_buf, ADC_BUF_LEN/2, msg_buf, MSG_BUF_LEN, ADC_BUF_LEN/2);
 8001852:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	238c      	movs	r3, #140	@ 0x8c
 800185a:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_ADC_ConvCpltCallback+0x38>)
 800185c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001860:	4806      	ldr	r0, [pc, #24]	@ (800187c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001862:	f7ff ff37 	bl	80016d4 <demod_sig2>
	decision();
 8001866:	f7ff fe5b 	bl	8001520 <decision>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020000 	.word	0x40020000
 8001878:	20002118 	.word	0x20002118
 800187c:	20000118 	.word	0x20000118

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <Error_Handler+0x8>

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <HAL_MspInit+0x4c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ca:	2007      	movs	r0, #7
 80018cc:	f000 fe6c 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	@ (80019b8 <HAL_ADC_MspInit+0xdc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d157      	bne.n	80019ae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_ADC_MspInit+0xe0>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	4a2d      	ldr	r2, [pc, #180]	@ (80019bc <HAL_ADC_MspInit+0xe0>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190c:	6453      	str	r3, [r2, #68]	@ 0x44
 800190e:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <HAL_ADC_MspInit+0xe0>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_ADC_MspInit+0xe0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a26      	ldr	r2, [pc, #152]	@ (80019bc <HAL_ADC_MspInit+0xe0>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <HAL_ADC_MspInit+0xe0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	481d      	ldr	r0, [pc, #116]	@ (80019c0 <HAL_ADC_MspInit+0xe4>)
 800194a:	f001 f9df 	bl	8002d0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001950:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <HAL_ADC_MspInit+0xec>)
 8001952:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001968:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800196c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001970:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001974:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001978:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800197c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001984:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001992:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 8001994:	f000 fe4a 	bl	800262c <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800199e:	f7ff ff6f 	bl	8001880 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 80019a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80019a8:	4a06      	ldr	r2, [pc, #24]	@ (80019c4 <HAL_ADC_MspInit+0xe8>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40012000 	.word	0x40012000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	20000070 	.word	0x20000070
 80019c8:	40026410 	.word	0x40026410

080019cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	@ (8001a50 <HAL_UART_MspInit+0x84>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12b      	bne.n	8001a46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a10      	ldr	r2, [pc, #64]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a26:	230c      	movs	r3, #12
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a36:	2307      	movs	r3, #7
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <HAL_UART_MspInit+0x8c>)
 8001a42:	f001 f963 	bl	8002d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40004400 	.word	0x40004400
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <NMI_Handler+0x4>

08001a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <MemManage_Handler+0x4>

08001a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab2:	f000 f89b 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <DMA2_Stream0_IRQHandler+0x10>)
 8001ac2:	f000 feb9 	bl	8002838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000070 	.word	0x20000070

08001ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af8:	f7ff ffea 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afe:	490d      	ldr	r1, [pc, #52]	@ (8001b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b14:	4c0a      	ldr	r4, [pc, #40]	@ (8001b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b22:	f002 fa05 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7ff f99f 	bl	8000e68 <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b38:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 8001b3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b40:	200055e8 	.word	0x200055e8

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <HAL_Init+0x40>)
 8001b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <HAL_Init+0x40>)
 8001b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a07      	ldr	r2, [pc, #28]	@ (8001b88 <HAL_Init+0x40>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 fd19 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f000 f808 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7c:	f7ff fe86 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_InitTick+0x54>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_InitTick+0x58>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fd31 	bl	8002612 <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00e      	b.n	8001bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d80a      	bhi.n	8001bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f000 fcf9 	bl	80025be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bcc:	4a06      	ldr	r2, [pc, #24]	@ (8001be8 <HAL_InitTick+0x5c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000008 	.word	0x20000008
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x20>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <HAL_IncTick+0x24>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	200055e4 	.word	0x200055e4

08001c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return uwTick;
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_GetTick+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	200055e4 	.word	0x200055e4

08001c2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e033      	b.n	8001caa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fe46 	bl	80018dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c72:	f023 0302 	bic.w	r3, r3, #2
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fa44 	bl	800210c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f023 0303 	bic.w	r3, r3, #3
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c9a:	e001      	b.n	8001ca0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Start_DMA+0x1e>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0ce      	b.n	8001e70 <HAL_ADC_Start_DMA+0x1bc>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d018      	beq.n	8001d1a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e78 <HAL_ADC_Start_DMA+0x1c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8001e7c <HAL_ADC_Start_DMA+0x1c8>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9a      	lsrs	r2, r3, #18
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d28:	d107      	bne.n	8001d3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d38:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 8086 	bne.w	8001e56 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f023 0206 	bic.w	r2, r3, #6
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d96:	e002      	b.n	8001d9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da6:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_ADC_Start_DMA+0x1cc>)
 8001da8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dae:	4a35      	ldr	r2, [pc, #212]	@ (8001e84 <HAL_ADC_Start_DMA+0x1d0>)
 8001db0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db6:	4a34      	ldr	r2, [pc, #208]	@ (8001e88 <HAL_ADC_Start_DMA+0x1d4>)
 8001db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbe:	4a33      	ldr	r2, [pc, #204]	@ (8001e8c <HAL_ADC_Start_DMA+0x1d8>)
 8001dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001dca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001dda:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	334c      	adds	r3, #76	@ 0x4c
 8001df6:	4619      	mov	r1, r3
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f000 fcc4 	bl	8002788 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10f      	bne.n	8001e2c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d129      	bne.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	e020      	b.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <HAL_ADC_Start_DMA+0x1dc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d11b      	bne.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d114      	bne.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e00b      	b.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	40012300 	.word	0x40012300
 8001e84:	08002305 	.word	0x08002305
 8001e88:	080023bf 	.word	0x080023bf
 8001e8c:	080023db 	.word	0x080023db
 8001e90:	40012000 	.word	0x40012000

08001e94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x1c>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e113      	b.n	80020ec <HAL_ADC_ConfigChannel+0x244>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b09      	cmp	r3, #9
 8001ed2:	d925      	bls.n	8001f20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68d9      	ldr	r1, [r3, #12]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b1e      	subs	r3, #30
 8001eea:	2207      	movs	r2, #7
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68d9      	ldr	r1, [r3, #12]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4403      	add	r3, r0
 8001f12:	3b1e      	subs	r3, #30
 8001f14:	409a      	lsls	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	e022      	b.n	8001f66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	2207      	movs	r2, #7
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6919      	ldr	r1, [r3, #16]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4403      	add	r3, r0
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d824      	bhi.n	8001fb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b05      	subs	r3, #5
 8001f80:	221f      	movs	r2, #31
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b05      	subs	r3, #5
 8001faa:	fa00 f203 	lsl.w	r2, r0, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fb6:	e04c      	b.n	8002052 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d824      	bhi.n	800200a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b23      	subs	r3, #35	@ 0x23
 8001fd2:	221f      	movs	r2, #31
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	400a      	ands	r2, r1
 8001fe0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b23      	subs	r3, #35	@ 0x23
 8001ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
 8002008:	e023      	b.n	8002052 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b41      	subs	r3, #65	@ 0x41
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b41      	subs	r3, #65	@ 0x41
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002052:	4b29      	ldr	r3, [pc, #164]	@ (80020f8 <HAL_ADC_ConfigChannel+0x250>)
 8002054:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a28      	ldr	r2, [pc, #160]	@ (80020fc <HAL_ADC_ConfigChannel+0x254>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d10f      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1d8>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b12      	cmp	r3, #18
 8002066:	d10b      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <HAL_ADC_ConfigChannel+0x254>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d12b      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x23a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <HAL_ADC_ConfigChannel+0x258>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d003      	beq.n	800209c <HAL_ADC_ConfigChannel+0x1f4>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b11      	cmp	r3, #17
 800209a:	d122      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_ADC_ConfigChannel+0x258>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_ADC_ConfigChannel+0x25c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <HAL_ADC_ConfigChannel+0x260>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9a      	lsrs	r2, r3, #18
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40012300 	.word	0x40012300
 80020fc:	40012000 	.word	0x40012000
 8002100:	10000012 	.word	0x10000012
 8002104:	20000000 	.word	0x20000000
 8002108:	431bde83 	.word	0x431bde83

0800210c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002114:	4b79      	ldr	r3, [pc, #484]	@ (80022fc <ADC_Init+0x1f0>)
 8002116:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	431a      	orrs	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	021a      	lsls	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <ADC_Init+0x1f4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	e00f      	b.n	800220a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002208:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0202 	bic.w	r2, r2, #2
 8002218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e1b      	ldrb	r3, [r3, #24]
 8002224:	005a      	lsls	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002246:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002256:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	035a      	lsls	r2, r3, #13
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	e007      	b.n	8002280 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800227e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800228e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	3b01      	subs	r3, #1
 800229c:	051a      	lsls	r2, r3, #20
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022c2:	025a      	lsls	r2, r3, #9
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	029a      	lsls	r2, r3, #10
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40012300 	.word	0x40012300
 8002300:	0f000001 	.word	0x0f000001

08002304 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d13c      	bne.n	8002398 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12b      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d127      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	d119      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0220 	bic.w	r2, r2, #32
 800236a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff fa55 	bl	8001840 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002396:	e00e      	b.n	80023b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fd75 	bl	8001e94 <HAL_ADC_ErrorCallback>
}
 80023aa:	e004      	b.n	80023b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff fa19 	bl	8001804 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	@ 0x40
 80023ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f043 0204 	orr.w	r2, r3, #4
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fd4a 	bl	8001e94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4907      	ldr	r1, [pc, #28]	@ (80024a4 <__NVIC_EnableIRQ+0x38>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	@ (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf28      	it	cs
 800251a:	2304      	movcs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3304      	adds	r3, #4
 8002522:	2b06      	cmp	r3, #6
 8002524:	d902      	bls.n	800252c <NVIC_EncodePriority+0x30>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3b03      	subs	r3, #3
 800252a:	e000      	b.n	800252e <NVIC_EncodePriority+0x32>
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43d9      	mvns	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	4313      	orrs	r3, r2
         );
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	@ 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002574:	d301      	bcc.n	800257a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257a:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <SysTick_Config+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002582:	210f      	movs	r1, #15
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f7ff ff8e 	bl	80024a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <SysTick_Config+0x40>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <SysTick_Config+0x40>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff29 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff3e 	bl	8002450 <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff8e 	bl	80024fc <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5d 	bl	80024a8 <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff31 	bl	800246c <__NVIC_EnableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa2 	bl	8002564 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff faec 	bl	8001c14 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e099      	b.n	800277c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002668:	e00f      	b.n	800268a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800266a:	f7ff fad3 	bl	8001c14 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b05      	cmp	r3, #5
 8002676:	d908      	bls.n	800268a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e078      	b.n	800277c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e8      	bne.n	800266a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_DMA_Init+0x158>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d107      	bne.n	80026f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4313      	orrs	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 0307 	bic.w	r3, r3, #7
 800270a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	2b04      	cmp	r3, #4
 800271c:	d117      	bne.n	800274e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00e      	beq.n	800274e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fa6f 	bl	8002c14 <DMA_CheckFifoParam>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2240      	movs	r2, #64	@ 0x40
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800274a:	2301      	movs	r3, #1
 800274c:	e016      	b.n	800277c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fa26 	bl	8002ba8 <DMA_CalcBaseAndBitshift>
 800275c:	4603      	mov	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	223f      	movs	r2, #63	@ 0x3f
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	f010803f 	.word	0xf010803f

08002788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_Start_IT+0x26>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e040      	b.n	8002830 <HAL_DMA_Start_IT+0xa8>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d12f      	bne.n	8002822 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f9b8 	bl	8002b4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	223f      	movs	r2, #63	@ 0x3f
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0216 	orr.w	r2, r2, #22
 80027f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0208 	orr.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e005      	b.n	800282e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002844:	4b8e      	ldr	r3, [pc, #568]	@ (8002a80 <HAL_DMA_IRQHandler+0x248>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a8e      	ldr	r2, [pc, #568]	@ (8002a84 <HAL_DMA_IRQHandler+0x24c>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002862:	2208      	movs	r2, #8
 8002864:	409a      	lsls	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01a      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0204 	bic.w	r2, r2, #4
 800288a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	2208      	movs	r2, #8
 8002892:	409a      	lsls	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	2201      	movs	r2, #1
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d012      	beq.n	80028da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	2201      	movs	r2, #1
 80028c8:	409a      	lsls	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	2204      	movs	r2, #4
 80028e0:	409a      	lsls	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	2204      	movs	r2, #4
 80028fe:	409a      	lsls	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002908:	f043 0204 	orr.w	r2, r3, #4
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	2210      	movs	r2, #16
 8002916:	409a      	lsls	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d043      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d03c      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	2210      	movs	r2, #16
 8002934:	409a      	lsls	r2, r3
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d018      	beq.n	800297a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d024      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
 8002966:	e01f      	b.n	80029a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01b      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
 8002978:	e016      	b.n	80029a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0208 	bic.w	r2, r2, #8
 8002996:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	2220      	movs	r2, #32
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 808f 	beq.w	8002ad8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8087 	beq.w	8002ad8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ce:	2220      	movs	r2, #32
 80029d0:	409a      	lsls	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d136      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0216 	bic.w	r2, r2, #22
 80029f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <HAL_DMA_IRQHandler+0x1da>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0208 	bic.w	r2, r2, #8
 8002a20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	223f      	movs	r2, #63	@ 0x3f
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d07e      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
        }
        return;
 8002a4e:	e079      	b.n	8002b44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01d      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d031      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e02c      	b.n	8002ad8 <HAL_DMA_IRQHandler+0x2a0>
 8002a7e:	bf00      	nop
 8002a80:	20000000 	.word	0x20000000
 8002a84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d023      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e01e      	b.n	8002ad8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0210 	bic.w	r2, r2, #16
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d032      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d022      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2205      	movs	r2, #5
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	3301      	adds	r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d307      	bcc.n	8002b20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f2      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x2cc>
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b44:	bf00      	nop
    }
  }
}
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b40      	cmp	r3, #64	@ 0x40
 8002b78:	d108      	bne.n	8002b8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b8a:	e007      	b.n	8002b9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	60da      	str	r2, [r3, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3b10      	subs	r3, #16
 8002bb8:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <DMA_CalcBaseAndBitshift+0x64>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bc2:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <DMA_CalcBaseAndBitshift+0x68>)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d909      	bls.n	8002bea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	1d1a      	adds	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002be8:	e007      	b.n	8002bfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	aaaaaaab 	.word	0xaaaaaaab
 8002c10:	080050d0 	.word	0x080050d0

08002c14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11f      	bne.n	8002c6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d856      	bhi.n	8002ce2 <DMA_CheckFifoParam+0xce>
 8002c34:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <DMA_CheckFifoParam+0x28>)
 8002c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3a:	bf00      	nop
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002c5f 	.word	0x08002c5f
 8002c44:	08002c4d 	.word	0x08002c4d
 8002c48:	08002ce3 	.word	0x08002ce3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d046      	beq.n	8002ce6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5c:	e043      	b.n	8002ce6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c66:	d140      	bne.n	8002cea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6c:	e03d      	b.n	8002cea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c76:	d121      	bne.n	8002cbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d837      	bhi.n	8002cee <DMA_CheckFifoParam+0xda>
 8002c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c84 <DMA_CheckFifoParam+0x70>)
 8002c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c84:	08002c95 	.word	0x08002c95
 8002c88:	08002c9b 	.word	0x08002c9b
 8002c8c:	08002c95 	.word	0x08002c95
 8002c90:	08002cad 	.word	0x08002cad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      break;
 8002c98:	e030      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d025      	beq.n	8002cf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002caa:	e022      	b.n	8002cf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cb4:	d11f      	bne.n	8002cf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cba:	e01c      	b.n	8002cf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d903      	bls.n	8002cca <DMA_CheckFifoParam+0xb6>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d003      	beq.n	8002cd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cc8:	e018      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cce:	e015      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce0:	e00b      	b.n	8002cfa <DMA_CheckFifoParam+0xe6>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e00a      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e008      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e006      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e004      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e002      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      break;   
 8002cf6:	bf00      	nop
 8002cf8:	e000      	b.n	8002cfc <DMA_CheckFifoParam+0xe8>
      break;
 8002cfa:	bf00      	nop
    }
  } 
  
  return status; 
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop

08002d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	@ 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	e159      	b.n	8002fdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	f040 8148 	bne.w	8002fd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d005      	beq.n	8002d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d130      	bne.n	8002dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d94:	2201      	movs	r2, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 0201 	and.w	r2, r3, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d017      	beq.n	8002dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d123      	bne.n	8002e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	08da      	lsrs	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3208      	adds	r2, #8
 8002e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	08da      	lsrs	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3208      	adds	r2, #8
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0203 	and.w	r2, r3, #3
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a2 	beq.w	8002fd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	4b57      	ldr	r3, [pc, #348]	@ (8002ff4 <HAL_GPIO_Init+0x2e8>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	4a56      	ldr	r2, [pc, #344]	@ (8002ff4 <HAL_GPIO_Init+0x2e8>)
 8002e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea2:	4b54      	ldr	r3, [pc, #336]	@ (8002ff4 <HAL_GPIO_Init+0x2e8>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eae:	4a52      	ldr	r2, [pc, #328]	@ (8002ff8 <HAL_GPIO_Init+0x2ec>)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a49      	ldr	r2, [pc, #292]	@ (8002ffc <HAL_GPIO_Init+0x2f0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x202>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a48      	ldr	r2, [pc, #288]	@ (8003000 <HAL_GPIO_Init+0x2f4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x1fe>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a47      	ldr	r2, [pc, #284]	@ (8003004 <HAL_GPIO_Init+0x2f8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x1fa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a46      	ldr	r2, [pc, #280]	@ (8003008 <HAL_GPIO_Init+0x2fc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x1f6>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a45      	ldr	r2, [pc, #276]	@ (800300c <HAL_GPIO_Init+0x300>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x1f2>
 8002efa:	2304      	movs	r3, #4
 8002efc:	e008      	b.n	8002f10 <HAL_GPIO_Init+0x204>
 8002efe:	2307      	movs	r3, #7
 8002f00:	e006      	b.n	8002f10 <HAL_GPIO_Init+0x204>
 8002f02:	2303      	movs	r3, #3
 8002f04:	e004      	b.n	8002f10 <HAL_GPIO_Init+0x204>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e002      	b.n	8002f10 <HAL_GPIO_Init+0x204>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_GPIO_Init+0x204>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	f002 0203 	and.w	r2, r2, #3
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	4093      	lsls	r3, r2
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f20:	4935      	ldr	r1, [pc, #212]	@ (8002ff8 <HAL_GPIO_Init+0x2ec>)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	3302      	adds	r3, #2
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2e:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f52:	4a2f      	ldr	r2, [pc, #188]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f58:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f7c:	4a24      	ldr	r2, [pc, #144]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f82:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fac:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8003010 <HAL_GPIO_Init+0x304>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b0f      	cmp	r3, #15
 8002fe0:	f67f aea2 	bls.w	8002d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3724      	adds	r7, #36	@ 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40020000 	.word	0x40020000
 8003000:	40020400 	.word	0x40020400
 8003004:	40020800 	.word	0x40020800
 8003008:	40020c00 	.word	0x40020c00
 800300c:	40021000 	.word	0x40021000
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003030:	e003      	b.n	800303a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	041a      	lsls	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e267      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d075      	beq.n	8003152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003066:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00c      	beq.n	800308c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	4b7e      	ldr	r3, [pc, #504]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05b      	beq.n	8003150 <HAL_RCC_OscConfig+0x108>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d157      	bne.n	8003150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e242      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x74>
 80030ae:	4b76      	ldr	r3, [pc, #472]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a75      	ldr	r2, [pc, #468]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b70      	ldr	r3, [pc, #448]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a68      	ldr	r2, [pc, #416]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a65      	ldr	r2, [pc, #404]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fd88 	bl	8001c14 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe fd84 	bl	8001c14 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	@ 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e207      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xc0>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fd74 	bl	8001c14 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe fd70 	bl	8001c14 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1f3      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b51      	ldr	r3, [pc, #324]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0xe8>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315e:	4b4a      	ldr	r3, [pc, #296]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b47      	ldr	r3, [pc, #284]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b41      	ldr	r3, [pc, #260]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1c7      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4937      	ldr	r1, [pc, #220]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b34      	ldr	r3, [pc, #208]	@ (800328c <HAL_RCC_OscConfig+0x244>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe fd29 	bl	8001c14 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fe fd25 	bl	8001c14 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1a8      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b28      	ldr	r3, [pc, #160]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4925      	ldr	r1, [pc, #148]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCC_OscConfig+0x244>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fd08 	bl	8001c14 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe fd04 	bl	8001c14 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e187      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d036      	beq.n	80032a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_RCC_OscConfig+0x248>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe fce8 	bl	8001c14 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003248:	f7fe fce4 	bl	8001c14 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e167      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x200>
 8003266:	e01b      	b.n	80032a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_RCC_OscConfig+0x248>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fe fcd1 	bl	8001c14 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	e00e      	b.n	8003294 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003276:	f7fe fccd 	bl	8001c14 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d907      	bls.n	8003294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e150      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
 8003288:	40023800 	.word	0x40023800
 800328c:	42470000 	.word	0x42470000
 8003290:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	4b88      	ldr	r3, [pc, #544]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ea      	bne.n	8003276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8097 	beq.w	80033dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b2:	4b81      	ldr	r3, [pc, #516]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	4b7d      	ldr	r3, [pc, #500]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	4a7c      	ldr	r2, [pc, #496]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ce:	4b7a      	ldr	r3, [pc, #488]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032da:	2301      	movs	r3, #1
 80032dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	4b77      	ldr	r3, [pc, #476]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d118      	bne.n	800331c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ea:	4b74      	ldr	r3, [pc, #464]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a73      	ldr	r2, [pc, #460]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f6:	f7fe fc8d 	bl	8001c14 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fe:	f7fe fc89 	bl	8001c14 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e10c      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d106      	bne.n	8003332 <HAL_RCC_OscConfig+0x2ea>
 8003324:	4b64      	ldr	r3, [pc, #400]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a63      	ldr	r2, [pc, #396]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	e01c      	b.n	800336c <HAL_RCC_OscConfig+0x324>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x30c>
 800333a:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	4a5e      	ldr	r2, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	6713      	str	r3, [r2, #112]	@ 0x70
 8003346:	4b5c      	ldr	r3, [pc, #368]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0x324>
 8003354:	4b58      	ldr	r3, [pc, #352]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003358:	4a57      	ldr	r2, [pc, #348]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003360:	4b55      	ldr	r3, [pc, #340]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	4a54      	ldr	r2, [pc, #336]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003366:	f023 0304 	bic.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fe fc4e 	bl	8001c14 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe fc4a 	bl	8001c14 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0cb      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003392:	4b49      	ldr	r3, [pc, #292]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ee      	beq.n	800337c <HAL_RCC_OscConfig+0x334>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a0:	f7fe fc38 	bl	8001c14 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a8:	f7fe fc34 	bl	8001c14 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0b5      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033be:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ee      	bne.n	80033a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d0:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	4a38      	ldr	r2, [pc, #224]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a1 	beq.w	8003528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d05c      	beq.n	80034ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d141      	bne.n	800347e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b31      	ldr	r3, [pc, #196]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fc08 	bl	8001c14 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe fc04 	bl	8001c14 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e087      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	4b27      	ldr	r3, [pc, #156]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	019b      	lsls	r3, r3, #6
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	3b01      	subs	r3, #1
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fe fbdd 	bl	8001c14 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe fbd9 	bl	8001c14 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e05c      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x416>
 800347c:	e054      	b.n	8003528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fbc6 	bl	8001c14 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fbc2 	bl	8001c14 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e045      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x444>
 80034aa:	e03d      	b.n	8003528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e038      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
 80034c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x4ec>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d028      	beq.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d121      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d11a      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d107      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0cc      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b68      	ldr	r3, [pc, #416]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d90c      	bls.n	8003574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b65      	ldr	r3, [pc, #404]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a52      	ldr	r2, [pc, #328]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d044      	beq.n	8003658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d119      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b3f      	ldr	r3, [pc, #252]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e067      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b37      	ldr	r3, [pc, #220]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4934      	ldr	r1, [pc, #208]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003628:	f7fe faf4 	bl	8001c14 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fe faf0 	bl	8001c14 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e04f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d20c      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b22      	ldr	r3, [pc, #136]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	490a      	ldr	r1, [pc, #40]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fa54 	bl	8001b8c <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	080050b8 	.word	0x080050b8
 80036fc:	20000000 	.word	0x20000000
 8003700:	20000004 	.word	0x20000004

08003704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003708:	b094      	sub	sp, #80	@ 0x50
 800370a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003710:	2300      	movs	r3, #0
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003714:	2300      	movs	r3, #0
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371c:	4b79      	ldr	r3, [pc, #484]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d00d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x40>
 8003728:	2b08      	cmp	r3, #8
 800372a:	f200 80e1 	bhi.w	80038f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x34>
 8003732:	2b04      	cmp	r3, #4
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x3a>
 8003736:	e0db      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b73      	ldr	r3, [pc, #460]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x204>)
 800373a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800373c:	e0db      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373e:	4b73      	ldr	r3, [pc, #460]	@ (800390c <HAL_RCC_GetSysClockFreq+0x208>)
 8003740:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003742:	e0d8      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003744:	4b6f      	ldr	r3, [pc, #444]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800374c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374e:	4b6d      	ldr	r3, [pc, #436]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375a:	4b6a      	ldr	r3, [pc, #424]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	2200      	movs	r2, #0
 8003762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003764:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376c:	633b      	str	r3, [r7, #48]	@ 0x30
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
 8003772:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	f04f 0000 	mov.w	r0, #0
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	0159      	lsls	r1, r3, #5
 8003784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003788:	0150      	lsls	r0, r2, #5
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4621      	mov	r1, r4
 8003790:	1a51      	subs	r1, r2, r1
 8003792:	6139      	str	r1, [r7, #16]
 8003794:	4629      	mov	r1, r5
 8003796:	eb63 0301 	sbc.w	r3, r3, r1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a8:	4659      	mov	r1, fp
 80037aa:	018b      	lsls	r3, r1, #6
 80037ac:	4651      	mov	r1, sl
 80037ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037b2:	4651      	mov	r1, sl
 80037b4:	018a      	lsls	r2, r1, #6
 80037b6:	4651      	mov	r1, sl
 80037b8:	ebb2 0801 	subs.w	r8, r2, r1
 80037bc:	4659      	mov	r1, fp
 80037be:	eb63 0901 	sbc.w	r9, r3, r1
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d6:	4690      	mov	r8, r2
 80037d8:	4699      	mov	r9, r3
 80037da:	4623      	mov	r3, r4
 80037dc:	eb18 0303 	adds.w	r3, r8, r3
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	462b      	mov	r3, r5
 80037e4:	eb49 0303 	adc.w	r3, r9, r3
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037f6:	4629      	mov	r1, r5
 80037f8:	024b      	lsls	r3, r1, #9
 80037fa:	4621      	mov	r1, r4
 80037fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003800:	4621      	mov	r1, r4
 8003802:	024a      	lsls	r2, r1, #9
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800380a:	2200      	movs	r2, #0
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800380e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003810:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003814:	f7fd f9ae 	bl	8000b74 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003820:	e058      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003822:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	2200      	movs	r2, #0
 800382a:	4618      	mov	r0, r3
 800382c:	4611      	mov	r1, r2
 800382e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
 8003838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	f04f 0000 	mov.w	r0, #0
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	0159      	lsls	r1, r3, #5
 800384a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800384e:	0150      	lsls	r0, r2, #5
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4641      	mov	r1, r8
 8003856:	ebb2 0a01 	subs.w	sl, r2, r1
 800385a:	4649      	mov	r1, r9
 800385c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800386c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003874:	ebb2 040a 	subs.w	r4, r2, sl
 8003878:	eb63 050b 	sbc.w	r5, r3, fp
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	00eb      	lsls	r3, r5, #3
 8003886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800388a:	00e2      	lsls	r2, r4, #3
 800388c:	4614      	mov	r4, r2
 800388e:	461d      	mov	r5, r3
 8003890:	4643      	mov	r3, r8
 8003892:	18e3      	adds	r3, r4, r3
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	464b      	mov	r3, r9
 8003898:	eb45 0303 	adc.w	r3, r5, r3
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038aa:	4629      	mov	r1, r5
 80038ac:	028b      	lsls	r3, r1, #10
 80038ae:	4621      	mov	r1, r4
 80038b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b4:	4621      	mov	r1, r4
 80038b6:	028a      	lsls	r2, r1, #10
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038be:	2200      	movs	r2, #0
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	61fa      	str	r2, [r7, #28]
 80038c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c8:	f7fd f954 	bl	8000b74 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4613      	mov	r3, r2
 80038d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80038e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x204>)
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3750      	adds	r7, #80	@ 0x50
 80038fc:	46bd      	mov	sp, r7
 80038fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	00f42400 	.word	0x00f42400
 800390c:	007a1200 	.word	0x007a1200

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003914:	4b03      	ldr	r3, [pc, #12]	@ (8003924 <HAL_RCC_GetHCLKFreq+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000000 	.word	0x20000000

08003928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800392c:	f7ff fff0 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0a9b      	lsrs	r3, r3, #10
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	@ (800394c <HAL_RCC_GetPCLK1Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	080050c8 	.word	0x080050c8

08003950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003954:	f7ff ffdc 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0b5b      	lsrs	r3, r3, #13
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	@ (8003974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	080050c8 	.word	0x080050c8

08003978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe f814 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	@ 0x24
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f82b 	bl	8003a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a1c:	b0c0      	sub	sp, #256	@ 0x100
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	68d9      	ldr	r1, [r3, #12]
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	ea40 0301 	orr.w	r3, r0, r1
 8003a40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a70:	f021 010c 	bic.w	r1, r1, #12
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a92:	6999      	ldr	r1, [r3, #24]
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	ea40 0301 	orr.w	r3, r0, r1
 8003a9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d005      	beq.n	8003ab8 <UART_SetConfig+0xa0>
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce8 <UART_SetConfig+0x2d0>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d104      	bne.n	8003ac2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7ff ff4a 	bl	8003950 <HAL_RCC_GetPCLK2Freq>
 8003abc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ac0:	e003      	b.n	8003aca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7ff ff31 	bl	8003928 <HAL_RCC_GetPCLK1Freq>
 8003ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad4:	f040 810c 	bne.w	8003cf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ae2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ae6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003aea:	4622      	mov	r2, r4
 8003aec:	462b      	mov	r3, r5
 8003aee:	1891      	adds	r1, r2, r2
 8003af0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003af2:	415b      	adcs	r3, r3
 8003af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003af6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003afa:	4621      	mov	r1, r4
 8003afc:	eb12 0801 	adds.w	r8, r2, r1
 8003b00:	4629      	mov	r1, r5
 8003b02:	eb43 0901 	adc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b28:	462b      	mov	r3, r5
 8003b2a:	eb49 0303 	adc.w	r3, r9, r3
 8003b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b46:	460b      	mov	r3, r1
 8003b48:	18db      	adds	r3, r3, r3
 8003b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	eb42 0303 	adc.w	r3, r2, r3
 8003b52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b5c:	f7fd f80a 	bl	8000b74 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <UART_SetConfig+0x2d4>)
 8003b66:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	011c      	lsls	r4, r3, #4
 8003b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	1891      	adds	r1, r2, r2
 8003b86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b88:	415b      	adcs	r3, r3
 8003b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b90:	4641      	mov	r1, r8
 8003b92:	eb12 0a01 	adds.w	sl, r2, r1
 8003b96:	4649      	mov	r1, r9
 8003b98:	eb43 0b01 	adc.w	fp, r3, r1
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ba8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bb0:	4692      	mov	sl, r2
 8003bb2:	469b      	mov	fp, r3
 8003bb4:	4643      	mov	r3, r8
 8003bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	18db      	adds	r3, r3, r3
 8003be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003be2:	4613      	mov	r3, r2
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bf2:	f7fc ffbf 	bl	8000b74 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <UART_SetConfig+0x2d4>)
 8003bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2264      	movs	r2, #100	@ 0x64
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	1acb      	subs	r3, r1, r3
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c12:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <UART_SetConfig+0x2d4>)
 8003c14:	fba3 2302 	umull	r2, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c20:	441c      	add	r4, r3
 8003c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c34:	4642      	mov	r2, r8
 8003c36:	464b      	mov	r3, r9
 8003c38:	1891      	adds	r1, r2, r2
 8003c3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c44:	4641      	mov	r1, r8
 8003c46:	1851      	adds	r1, r2, r1
 8003c48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	414b      	adcs	r3, r1
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	00cb      	lsls	r3, r1, #3
 8003c60:	4651      	mov	r1, sl
 8003c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c66:	4651      	mov	r1, sl
 8003c68:	00ca      	lsls	r2, r1, #3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4642      	mov	r2, r8
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c78:	464b      	mov	r3, r9
 8003c7a:	460a      	mov	r2, r1
 8003c7c:	eb42 0303 	adc.w	r3, r2, r3
 8003c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c98:	460b      	mov	r3, r1
 8003c9a:	18db      	adds	r3, r3, r3
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	eb42 0303 	adc.w	r3, r2, r3
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cae:	f7fc ff61 	bl	8000b74 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <UART_SetConfig+0x2d4>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	@ 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	3332      	adds	r3, #50	@ 0x32
 8003cca:	4a08      	ldr	r2, [pc, #32]	@ (8003cec <UART_SetConfig+0x2d4>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 0207 	and.w	r2, r3, #7
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4422      	add	r2, r4
 8003cde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ce0:	e106      	b.n	8003ef0 <UART_SetConfig+0x4d8>
 8003ce2:	bf00      	nop
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40011400 	.word	0x40011400
 8003cec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	6239      	str	r1, [r7, #32]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1854      	adds	r4, r2, r1
 8003d16:	4649      	mov	r1, r9
 8003d18:	eb43 0501 	adc.w	r5, r3, r1
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	00eb      	lsls	r3, r5, #3
 8003d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2a:	00e2      	lsls	r2, r4, #3
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	461d      	mov	r5, r3
 8003d30:	4643      	mov	r3, r8
 8003d32:	18e3      	adds	r3, r4, r3
 8003d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d38:	464b      	mov	r3, r9
 8003d3a:	eb45 0303 	adc.w	r3, r5, r3
 8003d3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d5e:	4629      	mov	r1, r5
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	4621      	mov	r1, r4
 8003d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d68:	4621      	mov	r1, r4
 8003d6a:	008a      	lsls	r2, r1, #2
 8003d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d70:	f7fc ff00 	bl	8000b74 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4b60      	ldr	r3, [pc, #384]	@ (8003efc <UART_SetConfig+0x4e4>)
 8003d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	011c      	lsls	r4, r3, #4
 8003d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	61b9      	str	r1, [r7, #24]
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da4:	4641      	mov	r1, r8
 8003da6:	1851      	adds	r1, r2, r1
 8003da8:	6139      	str	r1, [r7, #16]
 8003daa:	4649      	mov	r1, r9
 8003dac:	414b      	adcs	r3, r1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	00cb      	lsls	r3, r1, #3
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	00ca      	lsls	r2, r1, #3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dd8:	464b      	mov	r3, r9
 8003dda:	460a      	mov	r2, r1
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	008b      	lsls	r3, r1, #2
 8003e00:	4641      	mov	r1, r8
 8003e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e06:	4641      	mov	r1, r8
 8003e08:	008a      	lsls	r2, r1, #2
 8003e0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e0e:	f7fc feb1 	bl	8000b74 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	4b38      	ldr	r3, [pc, #224]	@ (8003efc <UART_SetConfig+0x4e4>)
 8003e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2264      	movs	r2, #100	@ 0x64
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	1acb      	subs	r3, r1, r3
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	3332      	adds	r3, #50	@ 0x32
 8003e2c:	4a33      	ldr	r2, [pc, #204]	@ (8003efc <UART_SetConfig+0x4e4>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e38:	441c      	add	r4, r3
 8003e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e3e:	2200      	movs	r2, #0
 8003e40:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	1891      	adds	r1, r2, r2
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	415b      	adcs	r3, r3
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e58:	4641      	mov	r1, r8
 8003e5a:	1851      	adds	r1, r2, r1
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	4649      	mov	r1, r9
 8003e60:	414b      	adcs	r3, r1
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e70:	4659      	mov	r1, fp
 8003e72:	00cb      	lsls	r3, r1, #3
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	00ca      	lsls	r2, r1, #3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	4642      	mov	r2, r8
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	eb42 0303 	adc.w	r3, r2, r3
 8003e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003eac:	4649      	mov	r1, r9
 8003eae:	008b      	lsls	r3, r1, #2
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	008a      	lsls	r2, r1, #2
 8003eba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ebe:	f7fc fe59 	bl	8000b74 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <UART_SetConfig+0x4e4>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	@ 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	@ 0x32
 8003eda:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <UART_SetConfig+0x4e4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4422      	add	r2, r4
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efc:	51eb851f 	.word	0x51eb851f

08003f00 <memset>:
 8003f00:	4402      	add	r2, r0
 8003f02:	4603      	mov	r3, r0
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d100      	bne.n	8003f0a <memset+0xa>
 8003f08:	4770      	bx	lr
 8003f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f0e:	e7f9      	b.n	8003f04 <memset+0x4>

08003f10 <strcat>:
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4602      	mov	r2, r0
 8003f14:	7814      	ldrb	r4, [r2, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	3201      	adds	r2, #1
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d1fa      	bne.n	8003f14 <strcat+0x4>
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f28:	2a00      	cmp	r2, #0
 8003f2a:	d1f9      	bne.n	8003f20 <strcat+0x10>
 8003f2c:	bd10      	pop	{r4, pc}
	...

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4d0d      	ldr	r5, [pc, #52]	@ (8003f68 <__libc_init_array+0x38>)
 8003f34:	4c0d      	ldr	r4, [pc, #52]	@ (8003f6c <__libc_init_array+0x3c>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	42a6      	cmp	r6, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	4d0b      	ldr	r5, [pc, #44]	@ (8003f70 <__libc_init_array+0x40>)
 8003f42:	4c0c      	ldr	r4, [pc, #48]	@ (8003f74 <__libc_init_array+0x44>)
 8003f44:	f001 f8a4 	bl	8005090 <_init>
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f58:	4798      	blx	r3
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f62:	4798      	blx	r3
 8003f64:	3601      	adds	r6, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	080052b8 	.word	0x080052b8
 8003f6c:	080052b8 	.word	0x080052b8
 8003f70:	080052b8 	.word	0x080052b8
 8003f74:	080052bc 	.word	0x080052bc

08003f78 <strcpy>:
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f7e:	f803 2b01 	strb.w	r2, [r3], #1
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	d1f9      	bne.n	8003f7a <strcpy+0x2>
 8003f86:	4770      	bx	lr

08003f88 <cos>:
 8003f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f8a:	ec53 2b10 	vmov	r2, r3, d0
 8003f8e:	4826      	ldr	r0, [pc, #152]	@ (8004028 <cos+0xa0>)
 8003f90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f94:	4281      	cmp	r1, r0
 8003f96:	d806      	bhi.n	8003fa6 <cos+0x1e>
 8003f98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004020 <cos+0x98>
 8003f9c:	b005      	add	sp, #20
 8003f9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa2:	f000 b899 	b.w	80040d8 <__kernel_cos>
 8003fa6:	4821      	ldr	r0, [pc, #132]	@ (800402c <cos+0xa4>)
 8003fa8:	4281      	cmp	r1, r0
 8003faa:	d908      	bls.n	8003fbe <cos+0x36>
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f7fc f916 	bl	80001e0 <__aeabi_dsub>
 8003fb4:	ec41 0b10 	vmov	d0, r0, r1
 8003fb8:	b005      	add	sp, #20
 8003fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fbe:	4668      	mov	r0, sp
 8003fc0:	f000 fa0e 	bl	80043e0 <__ieee754_rem_pio2>
 8003fc4:	f000 0003 	and.w	r0, r0, #3
 8003fc8:	2801      	cmp	r0, #1
 8003fca:	d00b      	beq.n	8003fe4 <cos+0x5c>
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	d015      	beq.n	8003ffc <cos+0x74>
 8003fd0:	b9d8      	cbnz	r0, 800400a <cos+0x82>
 8003fd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fd6:	ed9d 0b00 	vldr	d0, [sp]
 8003fda:	f000 f87d 	bl	80040d8 <__kernel_cos>
 8003fde:	ec51 0b10 	vmov	r0, r1, d0
 8003fe2:	e7e7      	b.n	8003fb4 <cos+0x2c>
 8003fe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fe8:	ed9d 0b00 	vldr	d0, [sp]
 8003fec:	f000 f93c 	bl	8004268 <__kernel_sin>
 8003ff0:	ec53 2b10 	vmov	r2, r3, d0
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003ffa:	e7db      	b.n	8003fb4 <cos+0x2c>
 8003ffc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004000:	ed9d 0b00 	vldr	d0, [sp]
 8004004:	f000 f868 	bl	80040d8 <__kernel_cos>
 8004008:	e7f2      	b.n	8003ff0 <cos+0x68>
 800400a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800400e:	ed9d 0b00 	vldr	d0, [sp]
 8004012:	2001      	movs	r0, #1
 8004014:	f000 f928 	bl	8004268 <__kernel_sin>
 8004018:	e7e1      	b.n	8003fde <cos+0x56>
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w
	...
 8004028:	3fe921fb 	.word	0x3fe921fb
 800402c:	7fefffff 	.word	0x7fefffff

08004030 <sin>:
 8004030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004032:	ec53 2b10 	vmov	r2, r3, d0
 8004036:	4826      	ldr	r0, [pc, #152]	@ (80040d0 <sin+0xa0>)
 8004038:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800403c:	4281      	cmp	r1, r0
 800403e:	d807      	bhi.n	8004050 <sin+0x20>
 8004040:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80040c8 <sin+0x98>
 8004044:	2000      	movs	r0, #0
 8004046:	b005      	add	sp, #20
 8004048:	f85d eb04 	ldr.w	lr, [sp], #4
 800404c:	f000 b90c 	b.w	8004268 <__kernel_sin>
 8004050:	4820      	ldr	r0, [pc, #128]	@ (80040d4 <sin+0xa4>)
 8004052:	4281      	cmp	r1, r0
 8004054:	d908      	bls.n	8004068 <sin+0x38>
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	f7fc f8c1 	bl	80001e0 <__aeabi_dsub>
 800405e:	ec41 0b10 	vmov	d0, r0, r1
 8004062:	b005      	add	sp, #20
 8004064:	f85d fb04 	ldr.w	pc, [sp], #4
 8004068:	4668      	mov	r0, sp
 800406a:	f000 f9b9 	bl	80043e0 <__ieee754_rem_pio2>
 800406e:	f000 0003 	and.w	r0, r0, #3
 8004072:	2801      	cmp	r0, #1
 8004074:	d00c      	beq.n	8004090 <sin+0x60>
 8004076:	2802      	cmp	r0, #2
 8004078:	d011      	beq.n	800409e <sin+0x6e>
 800407a:	b9e8      	cbnz	r0, 80040b8 <sin+0x88>
 800407c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004080:	ed9d 0b00 	vldr	d0, [sp]
 8004084:	2001      	movs	r0, #1
 8004086:	f000 f8ef 	bl	8004268 <__kernel_sin>
 800408a:	ec51 0b10 	vmov	r0, r1, d0
 800408e:	e7e6      	b.n	800405e <sin+0x2e>
 8004090:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004094:	ed9d 0b00 	vldr	d0, [sp]
 8004098:	f000 f81e 	bl	80040d8 <__kernel_cos>
 800409c:	e7f5      	b.n	800408a <sin+0x5a>
 800409e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80040a2:	ed9d 0b00 	vldr	d0, [sp]
 80040a6:	2001      	movs	r0, #1
 80040a8:	f000 f8de 	bl	8004268 <__kernel_sin>
 80040ac:	ec53 2b10 	vmov	r2, r3, d0
 80040b0:	4610      	mov	r0, r2
 80040b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80040b6:	e7d2      	b.n	800405e <sin+0x2e>
 80040b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80040bc:	ed9d 0b00 	vldr	d0, [sp]
 80040c0:	f000 f80a 	bl	80040d8 <__kernel_cos>
 80040c4:	e7f2      	b.n	80040ac <sin+0x7c>
 80040c6:	bf00      	nop
	...
 80040d0:	3fe921fb 	.word	0x3fe921fb
 80040d4:	7fefffff 	.word	0x7fefffff

080040d8 <__kernel_cos>:
 80040d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	ec57 6b10 	vmov	r6, r7, d0
 80040e0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80040e4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80040e8:	ed8d 1b00 	vstr	d1, [sp]
 80040ec:	d206      	bcs.n	80040fc <__kernel_cos+0x24>
 80040ee:	4630      	mov	r0, r6
 80040f0:	4639      	mov	r1, r7
 80040f2:	f7fc fcc7 	bl	8000a84 <__aeabi_d2iz>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	f000 8088 	beq.w	800420c <__kernel_cos+0x134>
 80040fc:	4632      	mov	r2, r6
 80040fe:	463b      	mov	r3, r7
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc fa24 	bl	8000550 <__aeabi_dmul>
 8004108:	4b51      	ldr	r3, [pc, #324]	@ (8004250 <__kernel_cos+0x178>)
 800410a:	2200      	movs	r2, #0
 800410c:	4604      	mov	r4, r0
 800410e:	460d      	mov	r5, r1
 8004110:	f7fc fa1e 	bl	8000550 <__aeabi_dmul>
 8004114:	a340      	add	r3, pc, #256	@ (adr r3, 8004218 <__kernel_cos+0x140>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	4682      	mov	sl, r0
 800411c:	468b      	mov	fp, r1
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	f7fc fa15 	bl	8000550 <__aeabi_dmul>
 8004126:	a33e      	add	r3, pc, #248	@ (adr r3, 8004220 <__kernel_cos+0x148>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f7fc f85a 	bl	80001e4 <__adddf3>
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	f7fc fa0c 	bl	8000550 <__aeabi_dmul>
 8004138:	a33b      	add	r3, pc, #236	@ (adr r3, 8004228 <__kernel_cos+0x150>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f7fc f84f 	bl	80001e0 <__aeabi_dsub>
 8004142:	4622      	mov	r2, r4
 8004144:	462b      	mov	r3, r5
 8004146:	f7fc fa03 	bl	8000550 <__aeabi_dmul>
 800414a:	a339      	add	r3, pc, #228	@ (adr r3, 8004230 <__kernel_cos+0x158>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc f848 	bl	80001e4 <__adddf3>
 8004154:	4622      	mov	r2, r4
 8004156:	462b      	mov	r3, r5
 8004158:	f7fc f9fa 	bl	8000550 <__aeabi_dmul>
 800415c:	a336      	add	r3, pc, #216	@ (adr r3, 8004238 <__kernel_cos+0x160>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f7fc f83d 	bl	80001e0 <__aeabi_dsub>
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	f7fc f9f1 	bl	8000550 <__aeabi_dmul>
 800416e:	a334      	add	r3, pc, #208	@ (adr r3, 8004240 <__kernel_cos+0x168>)
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f7fc f836 	bl	80001e4 <__adddf3>
 8004178:	4622      	mov	r2, r4
 800417a:	462b      	mov	r3, r5
 800417c:	f7fc f9e8 	bl	8000550 <__aeabi_dmul>
 8004180:	4622      	mov	r2, r4
 8004182:	462b      	mov	r3, r5
 8004184:	f7fc f9e4 	bl	8000550 <__aeabi_dmul>
 8004188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800418c:	4604      	mov	r4, r0
 800418e:	460d      	mov	r5, r1
 8004190:	4630      	mov	r0, r6
 8004192:	4639      	mov	r1, r7
 8004194:	f7fc f9dc 	bl	8000550 <__aeabi_dmul>
 8004198:	460b      	mov	r3, r1
 800419a:	4602      	mov	r2, r0
 800419c:	4629      	mov	r1, r5
 800419e:	4620      	mov	r0, r4
 80041a0:	f7fc f81e 	bl	80001e0 <__aeabi_dsub>
 80041a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <__kernel_cos+0x17c>)
 80041a6:	4598      	cmp	r8, r3
 80041a8:	4606      	mov	r6, r0
 80041aa:	460f      	mov	r7, r1
 80041ac:	d810      	bhi.n	80041d0 <__kernel_cos+0xf8>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4650      	mov	r0, sl
 80041b4:	4659      	mov	r1, fp
 80041b6:	f7fc f813 	bl	80001e0 <__aeabi_dsub>
 80041ba:	460b      	mov	r3, r1
 80041bc:	4926      	ldr	r1, [pc, #152]	@ (8004258 <__kernel_cos+0x180>)
 80041be:	4602      	mov	r2, r0
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7fc f80d 	bl	80001e0 <__aeabi_dsub>
 80041c6:	ec41 0b10 	vmov	d0, r0, r1
 80041ca:	b003      	add	sp, #12
 80041cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d0:	4b22      	ldr	r3, [pc, #136]	@ (800425c <__kernel_cos+0x184>)
 80041d2:	4921      	ldr	r1, [pc, #132]	@ (8004258 <__kernel_cos+0x180>)
 80041d4:	4598      	cmp	r8, r3
 80041d6:	bf8c      	ite	hi
 80041d8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004260 <__kernel_cos+0x188>)
 80041da:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80041de:	2400      	movs	r4, #0
 80041e0:	4622      	mov	r2, r4
 80041e2:	462b      	mov	r3, r5
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7fb fffb 	bl	80001e0 <__aeabi_dsub>
 80041ea:	4622      	mov	r2, r4
 80041ec:	4680      	mov	r8, r0
 80041ee:	4689      	mov	r9, r1
 80041f0:	462b      	mov	r3, r5
 80041f2:	4650      	mov	r0, sl
 80041f4:	4659      	mov	r1, fp
 80041f6:	f7fb fff3 	bl	80001e0 <__aeabi_dsub>
 80041fa:	4632      	mov	r2, r6
 80041fc:	463b      	mov	r3, r7
 80041fe:	f7fb ffef 	bl	80001e0 <__aeabi_dsub>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4640      	mov	r0, r8
 8004208:	4649      	mov	r1, r9
 800420a:	e7da      	b.n	80041c2 <__kernel_cos+0xea>
 800420c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004248 <__kernel_cos+0x170>
 8004210:	e7db      	b.n	80041ca <__kernel_cos+0xf2>
 8004212:	bf00      	nop
 8004214:	f3af 8000 	nop.w
 8004218:	be8838d4 	.word	0xbe8838d4
 800421c:	bda8fae9 	.word	0xbda8fae9
 8004220:	bdb4b1c4 	.word	0xbdb4b1c4
 8004224:	3e21ee9e 	.word	0x3e21ee9e
 8004228:	809c52ad 	.word	0x809c52ad
 800422c:	3e927e4f 	.word	0x3e927e4f
 8004230:	19cb1590 	.word	0x19cb1590
 8004234:	3efa01a0 	.word	0x3efa01a0
 8004238:	16c15177 	.word	0x16c15177
 800423c:	3f56c16c 	.word	0x3f56c16c
 8004240:	5555554c 	.word	0x5555554c
 8004244:	3fa55555 	.word	0x3fa55555
 8004248:	00000000 	.word	0x00000000
 800424c:	3ff00000 	.word	0x3ff00000
 8004250:	3fe00000 	.word	0x3fe00000
 8004254:	3fd33332 	.word	0x3fd33332
 8004258:	3ff00000 	.word	0x3ff00000
 800425c:	3fe90000 	.word	0x3fe90000
 8004260:	3fd20000 	.word	0x3fd20000
 8004264:	00000000 	.word	0x00000000

08004268 <__kernel_sin>:
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	ec55 4b10 	vmov	r4, r5, d0
 8004270:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004274:	b085      	sub	sp, #20
 8004276:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800427a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800427e:	4680      	mov	r8, r0
 8004280:	d205      	bcs.n	800428e <__kernel_sin+0x26>
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	f7fc fbfd 	bl	8000a84 <__aeabi_d2iz>
 800428a:	2800      	cmp	r0, #0
 800428c:	d052      	beq.n	8004334 <__kernel_sin+0xcc>
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fc f95b 	bl	8000550 <__aeabi_dmul>
 800429a:	4682      	mov	sl, r0
 800429c:	468b      	mov	fp, r1
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4620      	mov	r0, r4
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc f953 	bl	8000550 <__aeabi_dmul>
 80042aa:	a342      	add	r3, pc, #264	@ (adr r3, 80043b4 <__kernel_sin+0x14c>)
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	e9cd 0100 	strd	r0, r1, [sp]
 80042b4:	4650      	mov	r0, sl
 80042b6:	4659      	mov	r1, fp
 80042b8:	f7fc f94a 	bl	8000550 <__aeabi_dmul>
 80042bc:	a33f      	add	r3, pc, #252	@ (adr r3, 80043bc <__kernel_sin+0x154>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f7fb ff8d 	bl	80001e0 <__aeabi_dsub>
 80042c6:	4652      	mov	r2, sl
 80042c8:	465b      	mov	r3, fp
 80042ca:	f7fc f941 	bl	8000550 <__aeabi_dmul>
 80042ce:	a33d      	add	r3, pc, #244	@ (adr r3, 80043c4 <__kernel_sin+0x15c>)
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f7fb ff86 	bl	80001e4 <__adddf3>
 80042d8:	4652      	mov	r2, sl
 80042da:	465b      	mov	r3, fp
 80042dc:	f7fc f938 	bl	8000550 <__aeabi_dmul>
 80042e0:	a33a      	add	r3, pc, #232	@ (adr r3, 80043cc <__kernel_sin+0x164>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fb ff7b 	bl	80001e0 <__aeabi_dsub>
 80042ea:	4652      	mov	r2, sl
 80042ec:	465b      	mov	r3, fp
 80042ee:	f7fc f92f 	bl	8000550 <__aeabi_dmul>
 80042f2:	a338      	add	r3, pc, #224	@ (adr r3, 80043d4 <__kernel_sin+0x16c>)
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f7fb ff74 	bl	80001e4 <__adddf3>
 80042fc:	4606      	mov	r6, r0
 80042fe:	460f      	mov	r7, r1
 8004300:	f1b8 0f00 	cmp.w	r8, #0
 8004304:	d11b      	bne.n	800433e <__kernel_sin+0xd6>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4650      	mov	r0, sl
 800430c:	4659      	mov	r1, fp
 800430e:	f7fc f91f 	bl	8000550 <__aeabi_dmul>
 8004312:	a325      	add	r3, pc, #148	@ (adr r3, 80043a8 <__kernel_sin+0x140>)
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f7fb ff62 	bl	80001e0 <__aeabi_dsub>
 800431c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004320:	f7fc f916 	bl	8000550 <__aeabi_dmul>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4620      	mov	r0, r4
 800432a:	4629      	mov	r1, r5
 800432c:	f7fb ff5a 	bl	80001e4 <__adddf3>
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	ec45 4b10 	vmov	d0, r4, r5
 8004338:	b005      	add	sp, #20
 800433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004342:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <__kernel_sin+0x148>)
 8004344:	2200      	movs	r2, #0
 8004346:	f7fc f903 	bl	8000550 <__aeabi_dmul>
 800434a:	4632      	mov	r2, r6
 800434c:	4680      	mov	r8, r0
 800434e:	4689      	mov	r9, r1
 8004350:	463b      	mov	r3, r7
 8004352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004356:	f7fc f8fb 	bl	8000550 <__aeabi_dmul>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4640      	mov	r0, r8
 8004360:	4649      	mov	r1, r9
 8004362:	f7fb ff3d 	bl	80001e0 <__aeabi_dsub>
 8004366:	4652      	mov	r2, sl
 8004368:	465b      	mov	r3, fp
 800436a:	f7fc f8f1 	bl	8000550 <__aeabi_dmul>
 800436e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004372:	f7fb ff35 	bl	80001e0 <__aeabi_dsub>
 8004376:	a30c      	add	r3, pc, #48	@ (adr r3, 80043a8 <__kernel_sin+0x140>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	4606      	mov	r6, r0
 800437e:	460f      	mov	r7, r1
 8004380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004384:	f7fc f8e4 	bl	8000550 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4630      	mov	r0, r6
 800438e:	4639      	mov	r1, r7
 8004390:	f7fb ff28 	bl	80001e4 <__adddf3>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4620      	mov	r0, r4
 800439a:	4629      	mov	r1, r5
 800439c:	f7fb ff20 	bl	80001e0 <__aeabi_dsub>
 80043a0:	e7c6      	b.n	8004330 <__kernel_sin+0xc8>
 80043a2:	bf00      	nop
 80043a4:	f3af 8000 	nop.w
 80043a8:	55555549 	.word	0x55555549
 80043ac:	3fc55555 	.word	0x3fc55555
 80043b0:	3fe00000 	.word	0x3fe00000
 80043b4:	5acfd57c 	.word	0x5acfd57c
 80043b8:	3de5d93a 	.word	0x3de5d93a
 80043bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80043c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80043c4:	57b1fe7d 	.word	0x57b1fe7d
 80043c8:	3ec71de3 	.word	0x3ec71de3
 80043cc:	19c161d5 	.word	0x19c161d5
 80043d0:	3f2a01a0 	.word	0x3f2a01a0
 80043d4:	1110f8a6 	.word	0x1110f8a6
 80043d8:	3f811111 	.word	0x3f811111
 80043dc:	00000000 	.word	0x00000000

080043e0 <__ieee754_rem_pio2>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	ec57 6b10 	vmov	r6, r7, d0
 80043e8:	4bc5      	ldr	r3, [pc, #788]	@ (8004700 <__ieee754_rem_pio2+0x320>)
 80043ea:	b08d      	sub	sp, #52	@ 0x34
 80043ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80043f0:	4598      	cmp	r8, r3
 80043f2:	4604      	mov	r4, r0
 80043f4:	9704      	str	r7, [sp, #16]
 80043f6:	d807      	bhi.n	8004408 <__ieee754_rem_pio2+0x28>
 80043f8:	2200      	movs	r2, #0
 80043fa:	2300      	movs	r3, #0
 80043fc:	ed80 0b00 	vstr	d0, [r0]
 8004400:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004404:	2500      	movs	r5, #0
 8004406:	e028      	b.n	800445a <__ieee754_rem_pio2+0x7a>
 8004408:	4bbe      	ldr	r3, [pc, #760]	@ (8004704 <__ieee754_rem_pio2+0x324>)
 800440a:	4598      	cmp	r8, r3
 800440c:	d878      	bhi.n	8004500 <__ieee754_rem_pio2+0x120>
 800440e:	9b04      	ldr	r3, [sp, #16]
 8004410:	4dbd      	ldr	r5, [pc, #756]	@ (8004708 <__ieee754_rem_pio2+0x328>)
 8004412:	2b00      	cmp	r3, #0
 8004414:	4630      	mov	r0, r6
 8004416:	a3ac      	add	r3, pc, #688	@ (adr r3, 80046c8 <__ieee754_rem_pio2+0x2e8>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	4639      	mov	r1, r7
 800441e:	dd38      	ble.n	8004492 <__ieee754_rem_pio2+0xb2>
 8004420:	f7fb fede 	bl	80001e0 <__aeabi_dsub>
 8004424:	45a8      	cmp	r8, r5
 8004426:	4606      	mov	r6, r0
 8004428:	460f      	mov	r7, r1
 800442a:	d01a      	beq.n	8004462 <__ieee754_rem_pio2+0x82>
 800442c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80046d0 <__ieee754_rem_pio2+0x2f0>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f7fb fed5 	bl	80001e0 <__aeabi_dsub>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4680      	mov	r8, r0
 800443c:	4689      	mov	r9, r1
 800443e:	4630      	mov	r0, r6
 8004440:	4639      	mov	r1, r7
 8004442:	f7fb fecd 	bl	80001e0 <__aeabi_dsub>
 8004446:	a3a2      	add	r3, pc, #648	@ (adr r3, 80046d0 <__ieee754_rem_pio2+0x2f0>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fb fec8 	bl	80001e0 <__aeabi_dsub>
 8004450:	e9c4 8900 	strd	r8, r9, [r4]
 8004454:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004458:	2501      	movs	r5, #1
 800445a:	4628      	mov	r0, r5
 800445c:	b00d      	add	sp, #52	@ 0x34
 800445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004462:	a39d      	add	r3, pc, #628	@ (adr r3, 80046d8 <__ieee754_rem_pio2+0x2f8>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fb feba 	bl	80001e0 <__aeabi_dsub>
 800446c:	a39c      	add	r3, pc, #624	@ (adr r3, 80046e0 <__ieee754_rem_pio2+0x300>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	4606      	mov	r6, r0
 8004474:	460f      	mov	r7, r1
 8004476:	f7fb feb3 	bl	80001e0 <__aeabi_dsub>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4680      	mov	r8, r0
 8004480:	4689      	mov	r9, r1
 8004482:	4630      	mov	r0, r6
 8004484:	4639      	mov	r1, r7
 8004486:	f7fb feab 	bl	80001e0 <__aeabi_dsub>
 800448a:	a395      	add	r3, pc, #596	@ (adr r3, 80046e0 <__ieee754_rem_pio2+0x300>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	e7dc      	b.n	800444c <__ieee754_rem_pio2+0x6c>
 8004492:	f7fb fea7 	bl	80001e4 <__adddf3>
 8004496:	45a8      	cmp	r8, r5
 8004498:	4606      	mov	r6, r0
 800449a:	460f      	mov	r7, r1
 800449c:	d018      	beq.n	80044d0 <__ieee754_rem_pio2+0xf0>
 800449e:	a38c      	add	r3, pc, #560	@ (adr r3, 80046d0 <__ieee754_rem_pio2+0x2f0>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fb fe9e 	bl	80001e4 <__adddf3>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4680      	mov	r8, r0
 80044ae:	4689      	mov	r9, r1
 80044b0:	4630      	mov	r0, r6
 80044b2:	4639      	mov	r1, r7
 80044b4:	f7fb fe94 	bl	80001e0 <__aeabi_dsub>
 80044b8:	a385      	add	r3, pc, #532	@ (adr r3, 80046d0 <__ieee754_rem_pio2+0x2f0>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f7fb fe91 	bl	80001e4 <__adddf3>
 80044c2:	f04f 35ff 	mov.w	r5, #4294967295
 80044c6:	e9c4 8900 	strd	r8, r9, [r4]
 80044ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80044ce:	e7c4      	b.n	800445a <__ieee754_rem_pio2+0x7a>
 80044d0:	a381      	add	r3, pc, #516	@ (adr r3, 80046d8 <__ieee754_rem_pio2+0x2f8>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fb fe85 	bl	80001e4 <__adddf3>
 80044da:	a381      	add	r3, pc, #516	@ (adr r3, 80046e0 <__ieee754_rem_pio2+0x300>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	4606      	mov	r6, r0
 80044e2:	460f      	mov	r7, r1
 80044e4:	f7fb fe7e 	bl	80001e4 <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4680      	mov	r8, r0
 80044ee:	4689      	mov	r9, r1
 80044f0:	4630      	mov	r0, r6
 80044f2:	4639      	mov	r1, r7
 80044f4:	f7fb fe74 	bl	80001e0 <__aeabi_dsub>
 80044f8:	a379      	add	r3, pc, #484	@ (adr r3, 80046e0 <__ieee754_rem_pio2+0x300>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	e7de      	b.n	80044be <__ieee754_rem_pio2+0xde>
 8004500:	4b82      	ldr	r3, [pc, #520]	@ (800470c <__ieee754_rem_pio2+0x32c>)
 8004502:	4598      	cmp	r8, r3
 8004504:	f200 80d1 	bhi.w	80046aa <__ieee754_rem_pio2+0x2ca>
 8004508:	f000 f966 	bl	80047d8 <fabs>
 800450c:	ec57 6b10 	vmov	r6, r7, d0
 8004510:	a375      	add	r3, pc, #468	@ (adr r3, 80046e8 <__ieee754_rem_pio2+0x308>)
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	f7fc f819 	bl	8000550 <__aeabi_dmul>
 800451e:	4b7c      	ldr	r3, [pc, #496]	@ (8004710 <__ieee754_rem_pio2+0x330>)
 8004520:	2200      	movs	r2, #0
 8004522:	f7fb fe5f 	bl	80001e4 <__adddf3>
 8004526:	f7fc faad 	bl	8000a84 <__aeabi_d2iz>
 800452a:	4605      	mov	r5, r0
 800452c:	f7fb ffa6 	bl	800047c <__aeabi_i2d>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004538:	a363      	add	r3, pc, #396	@ (adr r3, 80046c8 <__ieee754_rem_pio2+0x2e8>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fc f807 	bl	8000550 <__aeabi_dmul>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4630      	mov	r0, r6
 8004548:	4639      	mov	r1, r7
 800454a:	f7fb fe49 	bl	80001e0 <__aeabi_dsub>
 800454e:	a360      	add	r3, pc, #384	@ (adr r3, 80046d0 <__ieee754_rem_pio2+0x2f0>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	4682      	mov	sl, r0
 8004556:	468b      	mov	fp, r1
 8004558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800455c:	f7fb fff8 	bl	8000550 <__aeabi_dmul>
 8004560:	2d1f      	cmp	r5, #31
 8004562:	4606      	mov	r6, r0
 8004564:	460f      	mov	r7, r1
 8004566:	dc0c      	bgt.n	8004582 <__ieee754_rem_pio2+0x1a2>
 8004568:	4b6a      	ldr	r3, [pc, #424]	@ (8004714 <__ieee754_rem_pio2+0x334>)
 800456a:	1e6a      	subs	r2, r5, #1
 800456c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004570:	4543      	cmp	r3, r8
 8004572:	d006      	beq.n	8004582 <__ieee754_rem_pio2+0x1a2>
 8004574:	4632      	mov	r2, r6
 8004576:	463b      	mov	r3, r7
 8004578:	4650      	mov	r0, sl
 800457a:	4659      	mov	r1, fp
 800457c:	f7fb fe30 	bl	80001e0 <__aeabi_dsub>
 8004580:	e00e      	b.n	80045a0 <__ieee754_rem_pio2+0x1c0>
 8004582:	463b      	mov	r3, r7
 8004584:	4632      	mov	r2, r6
 8004586:	4650      	mov	r0, sl
 8004588:	4659      	mov	r1, fp
 800458a:	f7fb fe29 	bl	80001e0 <__aeabi_dsub>
 800458e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004592:	9305      	str	r3, [sp, #20]
 8004594:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004598:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800459c:	2b10      	cmp	r3, #16
 800459e:	dc02      	bgt.n	80045a6 <__ieee754_rem_pio2+0x1c6>
 80045a0:	e9c4 0100 	strd	r0, r1, [r4]
 80045a4:	e039      	b.n	800461a <__ieee754_rem_pio2+0x23a>
 80045a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80046d8 <__ieee754_rem_pio2+0x2f8>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045b0:	f7fb ffce 	bl	8000550 <__aeabi_dmul>
 80045b4:	4606      	mov	r6, r0
 80045b6:	460f      	mov	r7, r1
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4650      	mov	r0, sl
 80045be:	4659      	mov	r1, fp
 80045c0:	f7fb fe0e 	bl	80001e0 <__aeabi_dsub>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4680      	mov	r8, r0
 80045ca:	4689      	mov	r9, r1
 80045cc:	4650      	mov	r0, sl
 80045ce:	4659      	mov	r1, fp
 80045d0:	f7fb fe06 	bl	80001e0 <__aeabi_dsub>
 80045d4:	4632      	mov	r2, r6
 80045d6:	463b      	mov	r3, r7
 80045d8:	f7fb fe02 	bl	80001e0 <__aeabi_dsub>
 80045dc:	a340      	add	r3, pc, #256	@ (adr r3, 80046e0 <__ieee754_rem_pio2+0x300>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	4606      	mov	r6, r0
 80045e4:	460f      	mov	r7, r1
 80045e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ea:	f7fb ffb1 	bl	8000550 <__aeabi_dmul>
 80045ee:	4632      	mov	r2, r6
 80045f0:	463b      	mov	r3, r7
 80045f2:	f7fb fdf5 	bl	80001e0 <__aeabi_dsub>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4606      	mov	r6, r0
 80045fc:	460f      	mov	r7, r1
 80045fe:	4640      	mov	r0, r8
 8004600:	4649      	mov	r1, r9
 8004602:	f7fb fded 	bl	80001e0 <__aeabi_dsub>
 8004606:	9a05      	ldr	r2, [sp, #20]
 8004608:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b31      	cmp	r3, #49	@ 0x31
 8004610:	dc20      	bgt.n	8004654 <__ieee754_rem_pio2+0x274>
 8004612:	e9c4 0100 	strd	r0, r1, [r4]
 8004616:	46c2      	mov	sl, r8
 8004618:	46cb      	mov	fp, r9
 800461a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800461e:	4650      	mov	r0, sl
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	4659      	mov	r1, fp
 8004626:	f7fb fddb 	bl	80001e0 <__aeabi_dsub>
 800462a:	463b      	mov	r3, r7
 800462c:	4632      	mov	r2, r6
 800462e:	f7fb fdd7 	bl	80001e0 <__aeabi_dsub>
 8004632:	9b04      	ldr	r3, [sp, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800463a:	f6bf af0e 	bge.w	800445a <__ieee754_rem_pio2+0x7a>
 800463e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004642:	6063      	str	r3, [r4, #4]
 8004644:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004648:	f8c4 8000 	str.w	r8, [r4]
 800464c:	60a0      	str	r0, [r4, #8]
 800464e:	60e3      	str	r3, [r4, #12]
 8004650:	426d      	negs	r5, r5
 8004652:	e702      	b.n	800445a <__ieee754_rem_pio2+0x7a>
 8004654:	a326      	add	r3, pc, #152	@ (adr r3, 80046f0 <__ieee754_rem_pio2+0x310>)
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800465e:	f7fb ff77 	bl	8000550 <__aeabi_dmul>
 8004662:	4606      	mov	r6, r0
 8004664:	460f      	mov	r7, r1
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fb fdb7 	bl	80001e0 <__aeabi_dsub>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4682      	mov	sl, r0
 8004678:	468b      	mov	fp, r1
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	f7fb fdaf 	bl	80001e0 <__aeabi_dsub>
 8004682:	4632      	mov	r2, r6
 8004684:	463b      	mov	r3, r7
 8004686:	f7fb fdab 	bl	80001e0 <__aeabi_dsub>
 800468a:	a31b      	add	r3, pc, #108	@ (adr r3, 80046f8 <__ieee754_rem_pio2+0x318>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	4606      	mov	r6, r0
 8004692:	460f      	mov	r7, r1
 8004694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004698:	f7fb ff5a 	bl	8000550 <__aeabi_dmul>
 800469c:	4632      	mov	r2, r6
 800469e:	463b      	mov	r3, r7
 80046a0:	f7fb fd9e 	bl	80001e0 <__aeabi_dsub>
 80046a4:	4606      	mov	r6, r0
 80046a6:	460f      	mov	r7, r1
 80046a8:	e764      	b.n	8004574 <__ieee754_rem_pio2+0x194>
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <__ieee754_rem_pio2+0x338>)
 80046ac:	4598      	cmp	r8, r3
 80046ae:	d935      	bls.n	800471c <__ieee754_rem_pio2+0x33c>
 80046b0:	4632      	mov	r2, r6
 80046b2:	463b      	mov	r3, r7
 80046b4:	4630      	mov	r0, r6
 80046b6:	4639      	mov	r1, r7
 80046b8:	f7fb fd92 	bl	80001e0 <__aeabi_dsub>
 80046bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046c0:	e9c4 0100 	strd	r0, r1, [r4]
 80046c4:	e69e      	b.n	8004404 <__ieee754_rem_pio2+0x24>
 80046c6:	bf00      	nop
 80046c8:	54400000 	.word	0x54400000
 80046cc:	3ff921fb 	.word	0x3ff921fb
 80046d0:	1a626331 	.word	0x1a626331
 80046d4:	3dd0b461 	.word	0x3dd0b461
 80046d8:	1a600000 	.word	0x1a600000
 80046dc:	3dd0b461 	.word	0x3dd0b461
 80046e0:	2e037073 	.word	0x2e037073
 80046e4:	3ba3198a 	.word	0x3ba3198a
 80046e8:	6dc9c883 	.word	0x6dc9c883
 80046ec:	3fe45f30 	.word	0x3fe45f30
 80046f0:	2e000000 	.word	0x2e000000
 80046f4:	3ba3198a 	.word	0x3ba3198a
 80046f8:	252049c1 	.word	0x252049c1
 80046fc:	397b839a 	.word	0x397b839a
 8004700:	3fe921fb 	.word	0x3fe921fb
 8004704:	4002d97b 	.word	0x4002d97b
 8004708:	3ff921fb 	.word	0x3ff921fb
 800470c:	413921fb 	.word	0x413921fb
 8004710:	3fe00000 	.word	0x3fe00000
 8004714:	080050d8 	.word	0x080050d8
 8004718:	7fefffff 	.word	0x7fefffff
 800471c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004720:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004724:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004728:	4630      	mov	r0, r6
 800472a:	460f      	mov	r7, r1
 800472c:	f7fc f9aa 	bl	8000a84 <__aeabi_d2iz>
 8004730:	f7fb fea4 	bl	800047c <__aeabi_i2d>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4630      	mov	r0, r6
 800473a:	4639      	mov	r1, r7
 800473c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004740:	f7fb fd4e 	bl	80001e0 <__aeabi_dsub>
 8004744:	4b22      	ldr	r3, [pc, #136]	@ (80047d0 <__ieee754_rem_pio2+0x3f0>)
 8004746:	2200      	movs	r2, #0
 8004748:	f7fb ff02 	bl	8000550 <__aeabi_dmul>
 800474c:	460f      	mov	r7, r1
 800474e:	4606      	mov	r6, r0
 8004750:	f7fc f998 	bl	8000a84 <__aeabi_d2iz>
 8004754:	f7fb fe92 	bl	800047c <__aeabi_i2d>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4630      	mov	r0, r6
 800475e:	4639      	mov	r1, r7
 8004760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004764:	f7fb fd3c 	bl	80001e0 <__aeabi_dsub>
 8004768:	4b19      	ldr	r3, [pc, #100]	@ (80047d0 <__ieee754_rem_pio2+0x3f0>)
 800476a:	2200      	movs	r2, #0
 800476c:	f7fb fef0 	bl	8000550 <__aeabi_dmul>
 8004770:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004774:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004778:	f04f 0803 	mov.w	r8, #3
 800477c:	2600      	movs	r6, #0
 800477e:	2700      	movs	r7, #0
 8004780:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004784:	4632      	mov	r2, r6
 8004786:	463b      	mov	r3, r7
 8004788:	46c2      	mov	sl, r8
 800478a:	f108 38ff 	add.w	r8, r8, #4294967295
 800478e:	f7fc f947 	bl	8000a20 <__aeabi_dcmpeq>
 8004792:	2800      	cmp	r0, #0
 8004794:	d1f4      	bne.n	8004780 <__ieee754_rem_pio2+0x3a0>
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <__ieee754_rem_pio2+0x3f4>)
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	2302      	movs	r3, #2
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	462a      	mov	r2, r5
 80047a0:	4653      	mov	r3, sl
 80047a2:	4621      	mov	r1, r4
 80047a4:	a806      	add	r0, sp, #24
 80047a6:	f000 f81f 	bl	80047e8 <__kernel_rem_pio2>
 80047aa:	9b04      	ldr	r3, [sp, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	4605      	mov	r5, r0
 80047b0:	f6bf ae53 	bge.w	800445a <__ieee754_rem_pio2+0x7a>
 80047b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80047b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047bc:	e9c4 2300 	strd	r2, r3, [r4]
 80047c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80047c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80047cc:	e740      	b.n	8004650 <__ieee754_rem_pio2+0x270>
 80047ce:	bf00      	nop
 80047d0:	41700000 	.word	0x41700000
 80047d4:	08005158 	.word	0x08005158

080047d8 <fabs>:
 80047d8:	ec51 0b10 	vmov	r0, r1, d0
 80047dc:	4602      	mov	r2, r0
 80047de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80047e2:	ec43 2b10 	vmov	d0, r2, r3
 80047e6:	4770      	bx	lr

080047e8 <__kernel_rem_pio2>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	ed2d 8b02 	vpush	{d8}
 80047f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80047f4:	f112 0f14 	cmn.w	r2, #20
 80047f8:	9306      	str	r3, [sp, #24]
 80047fa:	9104      	str	r1, [sp, #16]
 80047fc:	4bbe      	ldr	r3, [pc, #760]	@ (8004af8 <__kernel_rem_pio2+0x310>)
 80047fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004800:	9008      	str	r0, [sp, #32]
 8004802:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	9b06      	ldr	r3, [sp, #24]
 800480a:	f103 33ff 	add.w	r3, r3, #4294967295
 800480e:	bfa8      	it	ge
 8004810:	1ed4      	subge	r4, r2, #3
 8004812:	9305      	str	r3, [sp, #20]
 8004814:	bfb2      	itee	lt
 8004816:	2400      	movlt	r4, #0
 8004818:	2318      	movge	r3, #24
 800481a:	fb94 f4f3 	sdivge	r4, r4, r3
 800481e:	f06f 0317 	mvn.w	r3, #23
 8004822:	fb04 3303 	mla	r3, r4, r3, r3
 8004826:	eb03 0b02 	add.w	fp, r3, r2
 800482a:	9b00      	ldr	r3, [sp, #0]
 800482c:	9a05      	ldr	r2, [sp, #20]
 800482e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004ae8 <__kernel_rem_pio2+0x300>
 8004832:	eb03 0802 	add.w	r8, r3, r2
 8004836:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004838:	1aa7      	subs	r7, r4, r2
 800483a:	ae20      	add	r6, sp, #128	@ 0x80
 800483c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004840:	2500      	movs	r5, #0
 8004842:	4545      	cmp	r5, r8
 8004844:	dd13      	ble.n	800486e <__kernel_rem_pio2+0x86>
 8004846:	9b06      	ldr	r3, [sp, #24]
 8004848:	aa20      	add	r2, sp, #128	@ 0x80
 800484a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800484e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004852:	f04f 0800 	mov.w	r8, #0
 8004856:	9b00      	ldr	r3, [sp, #0]
 8004858:	4598      	cmp	r8, r3
 800485a:	dc31      	bgt.n	80048c0 <__kernel_rem_pio2+0xd8>
 800485c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004ae8 <__kernel_rem_pio2+0x300>
 8004860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004864:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004868:	462f      	mov	r7, r5
 800486a:	2600      	movs	r6, #0
 800486c:	e01b      	b.n	80048a6 <__kernel_rem_pio2+0xbe>
 800486e:	42ef      	cmn	r7, r5
 8004870:	d407      	bmi.n	8004882 <__kernel_rem_pio2+0x9a>
 8004872:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004876:	f7fb fe01 	bl	800047c <__aeabi_i2d>
 800487a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800487e:	3501      	adds	r5, #1
 8004880:	e7df      	b.n	8004842 <__kernel_rem_pio2+0x5a>
 8004882:	ec51 0b18 	vmov	r0, r1, d8
 8004886:	e7f8      	b.n	800487a <__kernel_rem_pio2+0x92>
 8004888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800488c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004890:	f7fb fe5e 	bl	8000550 <__aeabi_dmul>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800489c:	f7fb fca2 	bl	80001e4 <__adddf3>
 80048a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048a4:	3601      	adds	r6, #1
 80048a6:	9b05      	ldr	r3, [sp, #20]
 80048a8:	429e      	cmp	r6, r3
 80048aa:	f1a7 0708 	sub.w	r7, r7, #8
 80048ae:	ddeb      	ble.n	8004888 <__kernel_rem_pio2+0xa0>
 80048b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048b4:	f108 0801 	add.w	r8, r8, #1
 80048b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80048bc:	3508      	adds	r5, #8
 80048be:	e7ca      	b.n	8004856 <__kernel_rem_pio2+0x6e>
 80048c0:	9b00      	ldr	r3, [sp, #0]
 80048c2:	f8dd 8000 	ldr.w	r8, [sp]
 80048c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80048c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80048cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80048ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80048d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80048d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80048da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048dc:	ab98      	add	r3, sp, #608	@ 0x260
 80048de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80048e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80048e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80048ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80048ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80048f2:	46a1      	mov	r9, r4
 80048f4:	46c2      	mov	sl, r8
 80048f6:	f1ba 0f00 	cmp.w	sl, #0
 80048fa:	f1a5 0508 	sub.w	r5, r5, #8
 80048fe:	dc77      	bgt.n	80049f0 <__kernel_rem_pio2+0x208>
 8004900:	4658      	mov	r0, fp
 8004902:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004906:	f000 fac7 	bl	8004e98 <scalbn>
 800490a:	ec57 6b10 	vmov	r6, r7, d0
 800490e:	2200      	movs	r2, #0
 8004910:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	f7fb fe1a 	bl	8000550 <__aeabi_dmul>
 800491c:	ec41 0b10 	vmov	d0, r0, r1
 8004920:	f000 fb3a 	bl	8004f98 <floor>
 8004924:	4b75      	ldr	r3, [pc, #468]	@ (8004afc <__kernel_rem_pio2+0x314>)
 8004926:	ec51 0b10 	vmov	r0, r1, d0
 800492a:	2200      	movs	r2, #0
 800492c:	f7fb fe10 	bl	8000550 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4630      	mov	r0, r6
 8004936:	4639      	mov	r1, r7
 8004938:	f7fb fc52 	bl	80001e0 <__aeabi_dsub>
 800493c:	460f      	mov	r7, r1
 800493e:	4606      	mov	r6, r0
 8004940:	f7fc f8a0 	bl	8000a84 <__aeabi_d2iz>
 8004944:	9002      	str	r0, [sp, #8]
 8004946:	f7fb fd99 	bl	800047c <__aeabi_i2d>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4630      	mov	r0, r6
 8004950:	4639      	mov	r1, r7
 8004952:	f7fb fc45 	bl	80001e0 <__aeabi_dsub>
 8004956:	f1bb 0f00 	cmp.w	fp, #0
 800495a:	4606      	mov	r6, r0
 800495c:	460f      	mov	r7, r1
 800495e:	dd6c      	ble.n	8004a3a <__kernel_rem_pio2+0x252>
 8004960:	f108 31ff 	add.w	r1, r8, #4294967295
 8004964:	ab0c      	add	r3, sp, #48	@ 0x30
 8004966:	9d02      	ldr	r5, [sp, #8]
 8004968:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800496c:	f1cb 0018 	rsb	r0, fp, #24
 8004970:	fa43 f200 	asr.w	r2, r3, r0
 8004974:	4415      	add	r5, r2
 8004976:	4082      	lsls	r2, r0
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	aa0c      	add	r2, sp, #48	@ 0x30
 800497c:	9502      	str	r5, [sp, #8]
 800497e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004982:	f1cb 0217 	rsb	r2, fp, #23
 8004986:	fa43 f902 	asr.w	r9, r3, r2
 800498a:	f1b9 0f00 	cmp.w	r9, #0
 800498e:	dd64      	ble.n	8004a5a <__kernel_rem_pio2+0x272>
 8004990:	9b02      	ldr	r3, [sp, #8]
 8004992:	2200      	movs	r2, #0
 8004994:	3301      	adds	r3, #1
 8004996:	9302      	str	r3, [sp, #8]
 8004998:	4615      	mov	r5, r2
 800499a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800499e:	4590      	cmp	r8, r2
 80049a0:	f300 80b8 	bgt.w	8004b14 <__kernel_rem_pio2+0x32c>
 80049a4:	f1bb 0f00 	cmp.w	fp, #0
 80049a8:	dd07      	ble.n	80049ba <__kernel_rem_pio2+0x1d2>
 80049aa:	f1bb 0f01 	cmp.w	fp, #1
 80049ae:	f000 80bf 	beq.w	8004b30 <__kernel_rem_pio2+0x348>
 80049b2:	f1bb 0f02 	cmp.w	fp, #2
 80049b6:	f000 80c6 	beq.w	8004b46 <__kernel_rem_pio2+0x35e>
 80049ba:	f1b9 0f02 	cmp.w	r9, #2
 80049be:	d14c      	bne.n	8004a5a <__kernel_rem_pio2+0x272>
 80049c0:	4632      	mov	r2, r6
 80049c2:	463b      	mov	r3, r7
 80049c4:	494e      	ldr	r1, [pc, #312]	@ (8004b00 <__kernel_rem_pio2+0x318>)
 80049c6:	2000      	movs	r0, #0
 80049c8:	f7fb fc0a 	bl	80001e0 <__aeabi_dsub>
 80049cc:	4606      	mov	r6, r0
 80049ce:	460f      	mov	r7, r1
 80049d0:	2d00      	cmp	r5, #0
 80049d2:	d042      	beq.n	8004a5a <__kernel_rem_pio2+0x272>
 80049d4:	4658      	mov	r0, fp
 80049d6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004af0 <__kernel_rem_pio2+0x308>
 80049da:	f000 fa5d 	bl	8004e98 <scalbn>
 80049de:	4630      	mov	r0, r6
 80049e0:	4639      	mov	r1, r7
 80049e2:	ec53 2b10 	vmov	r2, r3, d0
 80049e6:	f7fb fbfb 	bl	80001e0 <__aeabi_dsub>
 80049ea:	4606      	mov	r6, r0
 80049ec:	460f      	mov	r7, r1
 80049ee:	e034      	b.n	8004a5a <__kernel_rem_pio2+0x272>
 80049f0:	4b44      	ldr	r3, [pc, #272]	@ (8004b04 <__kernel_rem_pio2+0x31c>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049f8:	f7fb fdaa 	bl	8000550 <__aeabi_dmul>
 80049fc:	f7fc f842 	bl	8000a84 <__aeabi_d2iz>
 8004a00:	f7fb fd3c 	bl	800047c <__aeabi_i2d>
 8004a04:	4b40      	ldr	r3, [pc, #256]	@ (8004b08 <__kernel_rem_pio2+0x320>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	4606      	mov	r6, r0
 8004a0a:	460f      	mov	r7, r1
 8004a0c:	f7fb fda0 	bl	8000550 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a18:	f7fb fbe2 	bl	80001e0 <__aeabi_dsub>
 8004a1c:	f7fc f832 	bl	8000a84 <__aeabi_d2iz>
 8004a20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a24:	f849 0b04 	str.w	r0, [r9], #4
 8004a28:	4639      	mov	r1, r7
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f7fb fbda 	bl	80001e4 <__adddf3>
 8004a30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a38:	e75d      	b.n	80048f6 <__kernel_rem_pio2+0x10e>
 8004a3a:	d107      	bne.n	8004a4c <__kernel_rem_pio2+0x264>
 8004a3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004a40:	aa0c      	add	r2, sp, #48	@ 0x30
 8004a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a46:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004a4a:	e79e      	b.n	800498a <__kernel_rem_pio2+0x1a2>
 8004a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004b0c <__kernel_rem_pio2+0x324>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f7fc f804 	bl	8000a5c <__aeabi_dcmpge>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d143      	bne.n	8004ae0 <__kernel_rem_pio2+0x2f8>
 8004a58:	4681      	mov	r9, r0
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fb ffdd 	bl	8000a20 <__aeabi_dcmpeq>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f000 80bf 	beq.w	8004bea <__kernel_rem_pio2+0x402>
 8004a6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004a70:	2200      	movs	r2, #0
 8004a72:	9900      	ldr	r1, [sp, #0]
 8004a74:	428b      	cmp	r3, r1
 8004a76:	da6e      	bge.n	8004b56 <__kernel_rem_pio2+0x36e>
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	f000 8089 	beq.w	8004b90 <__kernel_rem_pio2+0x3a8>
 8004a7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a82:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a84:	f1ab 0b18 	sub.w	fp, fp, #24
 8004a88:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f6      	beq.n	8004a7e <__kernel_rem_pio2+0x296>
 8004a90:	4658      	mov	r0, fp
 8004a92:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004af0 <__kernel_rem_pio2+0x308>
 8004a96:	f000 f9ff 	bl	8004e98 <scalbn>
 8004a9a:	f108 0301 	add.w	r3, r8, #1
 8004a9e:	00da      	lsls	r2, r3, #3
 8004aa0:	9205      	str	r2, [sp, #20]
 8004aa2:	ec55 4b10 	vmov	r4, r5, d0
 8004aa6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004aa8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004b04 <__kernel_rem_pio2+0x31c>
 8004aac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004ab0:	4646      	mov	r6, r8
 8004ab2:	f04f 0a00 	mov.w	sl, #0
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	f280 80cf 	bge.w	8004c5a <__kernel_rem_pio2+0x472>
 8004abc:	4644      	mov	r4, r8
 8004abe:	2c00      	cmp	r4, #0
 8004ac0:	f2c0 80fd 	blt.w	8004cbe <__kernel_rem_pio2+0x4d6>
 8004ac4:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <__kernel_rem_pio2+0x328>)
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004aca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ace:	9306      	str	r3, [sp, #24]
 8004ad0:	f04f 0a00 	mov.w	sl, #0
 8004ad4:	f04f 0b00 	mov.w	fp, #0
 8004ad8:	2600      	movs	r6, #0
 8004ada:	eba8 0504 	sub.w	r5, r8, r4
 8004ade:	e0e2      	b.n	8004ca6 <__kernel_rem_pio2+0x4be>
 8004ae0:	f04f 0902 	mov.w	r9, #2
 8004ae4:	e754      	b.n	8004990 <__kernel_rem_pio2+0x1a8>
 8004ae6:	bf00      	nop
	...
 8004af4:	3ff00000 	.word	0x3ff00000
 8004af8:	080052a0 	.word	0x080052a0
 8004afc:	40200000 	.word	0x40200000
 8004b00:	3ff00000 	.word	0x3ff00000
 8004b04:	3e700000 	.word	0x3e700000
 8004b08:	41700000 	.word	0x41700000
 8004b0c:	3fe00000 	.word	0x3fe00000
 8004b10:	08005260 	.word	0x08005260
 8004b14:	f854 3b04 	ldr.w	r3, [r4], #4
 8004b18:	b945      	cbnz	r5, 8004b2c <__kernel_rem_pio2+0x344>
 8004b1a:	b123      	cbz	r3, 8004b26 <__kernel_rem_pio2+0x33e>
 8004b1c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004b20:	f844 3c04 	str.w	r3, [r4, #-4]
 8004b24:	2301      	movs	r3, #1
 8004b26:	3201      	adds	r2, #1
 8004b28:	461d      	mov	r5, r3
 8004b2a:	e738      	b.n	800499e <__kernel_rem_pio2+0x1b6>
 8004b2c:	1acb      	subs	r3, r1, r3
 8004b2e:	e7f7      	b.n	8004b20 <__kernel_rem_pio2+0x338>
 8004b30:	f108 32ff 	add.w	r2, r8, #4294967295
 8004b34:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004b3e:	a90c      	add	r1, sp, #48	@ 0x30
 8004b40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b44:	e739      	b.n	80049ba <__kernel_rem_pio2+0x1d2>
 8004b46:	f108 32ff 	add.w	r2, r8, #4294967295
 8004b4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b54:	e7f3      	b.n	8004b3e <__kernel_rem_pio2+0x356>
 8004b56:	a90c      	add	r1, sp, #48	@ 0x30
 8004b58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	e787      	b.n	8004a72 <__kernel_rem_pio2+0x28a>
 8004b62:	3401      	adds	r4, #1
 8004b64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004b68:	2a00      	cmp	r2, #0
 8004b6a:	d0fa      	beq.n	8004b62 <__kernel_rem_pio2+0x37a>
 8004b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b72:	eb0d 0503 	add.w	r5, sp, r3
 8004b76:	9b06      	ldr	r3, [sp, #24]
 8004b78:	aa20      	add	r2, sp, #128	@ 0x80
 8004b7a:	4443      	add	r3, r8
 8004b7c:	f108 0701 	add.w	r7, r8, #1
 8004b80:	3d98      	subs	r5, #152	@ 0x98
 8004b82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004b86:	4444      	add	r4, r8
 8004b88:	42bc      	cmp	r4, r7
 8004b8a:	da04      	bge.n	8004b96 <__kernel_rem_pio2+0x3ae>
 8004b8c:	46a0      	mov	r8, r4
 8004b8e:	e6a2      	b.n	80048d6 <__kernel_rem_pio2+0xee>
 8004b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b92:	2401      	movs	r4, #1
 8004b94:	e7e6      	b.n	8004b64 <__kernel_rem_pio2+0x37c>
 8004b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004b9c:	f7fb fc6e 	bl	800047c <__aeabi_i2d>
 8004ba0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004e68 <__kernel_rem_pio2+0x680>
 8004ba4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004bac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bb0:	46b2      	mov	sl, r6
 8004bb2:	f04f 0800 	mov.w	r8, #0
 8004bb6:	9b05      	ldr	r3, [sp, #20]
 8004bb8:	4598      	cmp	r8, r3
 8004bba:	dd05      	ble.n	8004bc8 <__kernel_rem_pio2+0x3e0>
 8004bbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004bc0:	3701      	adds	r7, #1
 8004bc2:	eca5 7b02 	vstmia	r5!, {d7}
 8004bc6:	e7df      	b.n	8004b88 <__kernel_rem_pio2+0x3a0>
 8004bc8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004bcc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004bd0:	f7fb fcbe 	bl	8000550 <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bdc:	f7fb fb02 	bl	80001e4 <__adddf3>
 8004be0:	f108 0801 	add.w	r8, r8, #1
 8004be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004be8:	e7e5      	b.n	8004bb6 <__kernel_rem_pio2+0x3ce>
 8004bea:	f1cb 0000 	rsb	r0, fp, #0
 8004bee:	ec47 6b10 	vmov	d0, r6, r7
 8004bf2:	f000 f951 	bl	8004e98 <scalbn>
 8004bf6:	ec55 4b10 	vmov	r4, r5, d0
 8004bfa:	4b9d      	ldr	r3, [pc, #628]	@ (8004e70 <__kernel_rem_pio2+0x688>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	f7fb ff2b 	bl	8000a5c <__aeabi_dcmpge>
 8004c06:	b300      	cbz	r0, 8004c4a <__kernel_rem_pio2+0x462>
 8004c08:	4b9a      	ldr	r3, [pc, #616]	@ (8004e74 <__kernel_rem_pio2+0x68c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	4629      	mov	r1, r5
 8004c10:	f7fb fc9e 	bl	8000550 <__aeabi_dmul>
 8004c14:	f7fb ff36 	bl	8000a84 <__aeabi_d2iz>
 8004c18:	4606      	mov	r6, r0
 8004c1a:	f7fb fc2f 	bl	800047c <__aeabi_i2d>
 8004c1e:	4b94      	ldr	r3, [pc, #592]	@ (8004e70 <__kernel_rem_pio2+0x688>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	f7fb fc95 	bl	8000550 <__aeabi_dmul>
 8004c26:	460b      	mov	r3, r1
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f7fb fad7 	bl	80001e0 <__aeabi_dsub>
 8004c32:	f7fb ff27 	bl	8000a84 <__aeabi_d2iz>
 8004c36:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c38:	f10b 0b18 	add.w	fp, fp, #24
 8004c3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004c40:	f108 0801 	add.w	r8, r8, #1
 8004c44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004c48:	e722      	b.n	8004a90 <__kernel_rem_pio2+0x2a8>
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	f7fb ff19 	bl	8000a84 <__aeabi_d2iz>
 8004c52:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004c58:	e71a      	b.n	8004a90 <__kernel_rem_pio2+0x2a8>
 8004c5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c60:	f7fb fc0c 	bl	800047c <__aeabi_i2d>
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	f7fb fc72 	bl	8000550 <__aeabi_dmul>
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004c72:	465b      	mov	r3, fp
 8004c74:	4620      	mov	r0, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f7fb fc6a 	bl	8000550 <__aeabi_dmul>
 8004c7c:	3e01      	subs	r6, #1
 8004c7e:	4604      	mov	r4, r0
 8004c80:	460d      	mov	r5, r1
 8004c82:	e718      	b.n	8004ab6 <__kernel_rem_pio2+0x2ce>
 8004c84:	9906      	ldr	r1, [sp, #24]
 8004c86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004c8a:	9106      	str	r1, [sp, #24]
 8004c8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004c90:	f7fb fc5e 	bl	8000550 <__aeabi_dmul>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4650      	mov	r0, sl
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	f7fb faa2 	bl	80001e4 <__adddf3>
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	4682      	mov	sl, r0
 8004ca4:	468b      	mov	fp, r1
 8004ca6:	9b00      	ldr	r3, [sp, #0]
 8004ca8:	429e      	cmp	r6, r3
 8004caa:	dc01      	bgt.n	8004cb0 <__kernel_rem_pio2+0x4c8>
 8004cac:	42b5      	cmp	r5, r6
 8004cae:	dae9      	bge.n	8004c84 <__kernel_rem_pio2+0x49c>
 8004cb0:	ab48      	add	r3, sp, #288	@ 0x120
 8004cb2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004cb6:	e9c5 ab00 	strd	sl, fp, [r5]
 8004cba:	3c01      	subs	r4, #1
 8004cbc:	e6ff      	b.n	8004abe <__kernel_rem_pio2+0x2d6>
 8004cbe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	dc0b      	bgt.n	8004cdc <__kernel_rem_pio2+0x4f4>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dc39      	bgt.n	8004d3c <__kernel_rem_pio2+0x554>
 8004cc8:	d05d      	beq.n	8004d86 <__kernel_rem_pio2+0x59e>
 8004cca:	9b02      	ldr	r3, [sp, #8]
 8004ccc:	f003 0007 	and.w	r0, r3, #7
 8004cd0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004cd4:	ecbd 8b02 	vpop	{d8}
 8004cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cdc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d1f3      	bne.n	8004cca <__kernel_rem_pio2+0x4e2>
 8004ce2:	9b05      	ldr	r3, [sp, #20]
 8004ce4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ce8:	eb0d 0403 	add.w	r4, sp, r3
 8004cec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004cf0:	4625      	mov	r5, r4
 8004cf2:	46c2      	mov	sl, r8
 8004cf4:	f1ba 0f00 	cmp.w	sl, #0
 8004cf8:	f1a5 0508 	sub.w	r5, r5, #8
 8004cfc:	dc6b      	bgt.n	8004dd6 <__kernel_rem_pio2+0x5ee>
 8004cfe:	4645      	mov	r5, r8
 8004d00:	2d01      	cmp	r5, #1
 8004d02:	f1a4 0408 	sub.w	r4, r4, #8
 8004d06:	f300 8087 	bgt.w	8004e18 <__kernel_rem_pio2+0x630>
 8004d0a:	9c05      	ldr	r4, [sp, #20]
 8004d0c:	ab48      	add	r3, sp, #288	@ 0x120
 8004d0e:	441c      	add	r4, r3
 8004d10:	2000      	movs	r0, #0
 8004d12:	2100      	movs	r1, #0
 8004d14:	f1b8 0f01 	cmp.w	r8, #1
 8004d18:	f300 809c 	bgt.w	8004e54 <__kernel_rem_pio2+0x66c>
 8004d1c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004d20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004d24:	f1b9 0f00 	cmp.w	r9, #0
 8004d28:	f040 80a6 	bne.w	8004e78 <__kernel_rem_pio2+0x690>
 8004d2c:	9b04      	ldr	r3, [sp, #16]
 8004d2e:	e9c3 7800 	strd	r7, r8, [r3]
 8004d32:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004d36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004d3a:	e7c6      	b.n	8004cca <__kernel_rem_pio2+0x4e2>
 8004d3c:	9d05      	ldr	r5, [sp, #20]
 8004d3e:	ab48      	add	r3, sp, #288	@ 0x120
 8004d40:	441d      	add	r5, r3
 8004d42:	4644      	mov	r4, r8
 8004d44:	2000      	movs	r0, #0
 8004d46:	2100      	movs	r1, #0
 8004d48:	2c00      	cmp	r4, #0
 8004d4a:	da35      	bge.n	8004db8 <__kernel_rem_pio2+0x5d0>
 8004d4c:	f1b9 0f00 	cmp.w	r9, #0
 8004d50:	d038      	beq.n	8004dc4 <__kernel_rem_pio2+0x5dc>
 8004d52:	4602      	mov	r2, r0
 8004d54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d58:	9c04      	ldr	r4, [sp, #16]
 8004d5a:	e9c4 2300 	strd	r2, r3, [r4]
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004d66:	f7fb fa3b 	bl	80001e0 <__aeabi_dsub>
 8004d6a:	ad4a      	add	r5, sp, #296	@ 0x128
 8004d6c:	2401      	movs	r4, #1
 8004d6e:	45a0      	cmp	r8, r4
 8004d70:	da2b      	bge.n	8004dca <__kernel_rem_pio2+0x5e2>
 8004d72:	f1b9 0f00 	cmp.w	r9, #0
 8004d76:	d002      	beq.n	8004d7e <__kernel_rem_pio2+0x596>
 8004d78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	9b04      	ldr	r3, [sp, #16]
 8004d80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004d84:	e7a1      	b.n	8004cca <__kernel_rem_pio2+0x4e2>
 8004d86:	9c05      	ldr	r4, [sp, #20]
 8004d88:	ab48      	add	r3, sp, #288	@ 0x120
 8004d8a:	441c      	add	r4, r3
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f1b8 0f00 	cmp.w	r8, #0
 8004d94:	da09      	bge.n	8004daa <__kernel_rem_pio2+0x5c2>
 8004d96:	f1b9 0f00 	cmp.w	r9, #0
 8004d9a:	d002      	beq.n	8004da2 <__kernel_rem_pio2+0x5ba>
 8004d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004da0:	4619      	mov	r1, r3
 8004da2:	9b04      	ldr	r3, [sp, #16]
 8004da4:	e9c3 0100 	strd	r0, r1, [r3]
 8004da8:	e78f      	b.n	8004cca <__kernel_rem_pio2+0x4e2>
 8004daa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004dae:	f7fb fa19 	bl	80001e4 <__adddf3>
 8004db2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004db6:	e7eb      	b.n	8004d90 <__kernel_rem_pio2+0x5a8>
 8004db8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004dbc:	f7fb fa12 	bl	80001e4 <__adddf3>
 8004dc0:	3c01      	subs	r4, #1
 8004dc2:	e7c1      	b.n	8004d48 <__kernel_rem_pio2+0x560>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e7c6      	b.n	8004d58 <__kernel_rem_pio2+0x570>
 8004dca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004dce:	f7fb fa09 	bl	80001e4 <__adddf3>
 8004dd2:	3401      	adds	r4, #1
 8004dd4:	e7cb      	b.n	8004d6e <__kernel_rem_pio2+0x586>
 8004dd6:	ed95 7b00 	vldr	d7, [r5]
 8004dda:	ed8d 7b00 	vstr	d7, [sp]
 8004dde:	ed95 7b02 	vldr	d7, [r5, #8]
 8004de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004de6:	ec53 2b17 	vmov	r2, r3, d7
 8004dea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004dee:	f7fb f9f9 	bl	80001e4 <__adddf3>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4606      	mov	r6, r0
 8004df8:	460f      	mov	r7, r1
 8004dfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dfe:	f7fb f9ef 	bl	80001e0 <__aeabi_dsub>
 8004e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e06:	f7fb f9ed 	bl	80001e4 <__adddf3>
 8004e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004e12:	e9c5 6700 	strd	r6, r7, [r5]
 8004e16:	e76d      	b.n	8004cf4 <__kernel_rem_pio2+0x50c>
 8004e18:	ed94 7b00 	vldr	d7, [r4]
 8004e1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004e20:	ec51 0b17 	vmov	r0, r1, d7
 8004e24:	4652      	mov	r2, sl
 8004e26:	465b      	mov	r3, fp
 8004e28:	ed8d 7b00 	vstr	d7, [sp]
 8004e2c:	f7fb f9da 	bl	80001e4 <__adddf3>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e3c:	f7fb f9d0 	bl	80001e0 <__aeabi_dsub>
 8004e40:	4652      	mov	r2, sl
 8004e42:	465b      	mov	r3, fp
 8004e44:	f7fb f9ce 	bl	80001e4 <__adddf3>
 8004e48:	3d01      	subs	r5, #1
 8004e4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e4e:	e9c4 6700 	strd	r6, r7, [r4]
 8004e52:	e755      	b.n	8004d00 <__kernel_rem_pio2+0x518>
 8004e54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004e58:	f7fb f9c4 	bl	80001e4 <__adddf3>
 8004e5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e60:	e758      	b.n	8004d14 <__kernel_rem_pio2+0x52c>
 8004e62:	bf00      	nop
 8004e64:	f3af 8000 	nop.w
	...
 8004e70:	41700000 	.word	0x41700000
 8004e74:	3e700000 	.word	0x3e700000
 8004e78:	9b04      	ldr	r3, [sp, #16]
 8004e7a:	9a04      	ldr	r2, [sp, #16]
 8004e7c:	601f      	str	r7, [r3, #0]
 8004e7e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004e82:	605c      	str	r4, [r3, #4]
 8004e84:	609d      	str	r5, [r3, #8]
 8004e86:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004e8a:	60d3      	str	r3, [r2, #12]
 8004e8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e90:	6110      	str	r0, [r2, #16]
 8004e92:	6153      	str	r3, [r2, #20]
 8004e94:	e719      	b.n	8004cca <__kernel_rem_pio2+0x4e2>
 8004e96:	bf00      	nop

08004e98 <scalbn>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	ec55 4b10 	vmov	r4, r5, d0
 8004e9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	b991      	cbnz	r1, 8004ece <scalbn+0x36>
 8004ea8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004eac:	4323      	orrs	r3, r4
 8004eae:	d03d      	beq.n	8004f2c <scalbn+0x94>
 8004eb0:	4b35      	ldr	r3, [pc, #212]	@ (8004f88 <scalbn+0xf0>)
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f7fb fb4a 	bl	8000550 <__aeabi_dmul>
 8004ebc:	4b33      	ldr	r3, [pc, #204]	@ (8004f8c <scalbn+0xf4>)
 8004ebe:	429e      	cmp	r6, r3
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	da0f      	bge.n	8004ee6 <scalbn+0x4e>
 8004ec6:	a328      	add	r3, pc, #160	@ (adr r3, 8004f68 <scalbn+0xd0>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	e01e      	b.n	8004f0c <scalbn+0x74>
 8004ece:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004ed2:	4291      	cmp	r1, r2
 8004ed4:	d10b      	bne.n	8004eee <scalbn+0x56>
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	4620      	mov	r0, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7fb f982 	bl	80001e4 <__adddf3>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	460d      	mov	r5, r1
 8004ee4:	e022      	b.n	8004f2c <scalbn+0x94>
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004eec:	3936      	subs	r1, #54	@ 0x36
 8004eee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004ef2:	4296      	cmp	r6, r2
 8004ef4:	dd0d      	ble.n	8004f12 <scalbn+0x7a>
 8004ef6:	2d00      	cmp	r5, #0
 8004ef8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004f70 <scalbn+0xd8>)
 8004efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004efe:	da02      	bge.n	8004f06 <scalbn+0x6e>
 8004f00:	a11d      	add	r1, pc, #116	@ (adr r1, 8004f78 <scalbn+0xe0>)
 8004f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f06:	a31a      	add	r3, pc, #104	@ (adr r3, 8004f70 <scalbn+0xd8>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f7fb fb20 	bl	8000550 <__aeabi_dmul>
 8004f10:	e7e6      	b.n	8004ee0 <scalbn+0x48>
 8004f12:	1872      	adds	r2, r6, r1
 8004f14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004f18:	428a      	cmp	r2, r1
 8004f1a:	dcec      	bgt.n	8004ef6 <scalbn+0x5e>
 8004f1c:	2a00      	cmp	r2, #0
 8004f1e:	dd08      	ble.n	8004f32 <scalbn+0x9a>
 8004f20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004f24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004f28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f2c:	ec45 4b10 	vmov	d0, r4, r5
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004f36:	da08      	bge.n	8004f4a <scalbn+0xb2>
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004f68 <scalbn+0xd0>)
 8004f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f40:	dac1      	bge.n	8004ec6 <scalbn+0x2e>
 8004f42:	a10f      	add	r1, pc, #60	@ (adr r1, 8004f80 <scalbn+0xe8>)
 8004f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f48:	e7bd      	b.n	8004ec6 <scalbn+0x2e>
 8004f4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004f4e:	3236      	adds	r2, #54	@ 0x36
 8004f50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004f54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f58:	4620      	mov	r0, r4
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <scalbn+0xf8>)
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	2200      	movs	r2, #0
 8004f60:	e7d4      	b.n	8004f0c <scalbn+0x74>
 8004f62:	bf00      	nop
 8004f64:	f3af 8000 	nop.w
 8004f68:	c2f8f359 	.word	0xc2f8f359
 8004f6c:	01a56e1f 	.word	0x01a56e1f
 8004f70:	8800759c 	.word	0x8800759c
 8004f74:	7e37e43c 	.word	0x7e37e43c
 8004f78:	8800759c 	.word	0x8800759c
 8004f7c:	fe37e43c 	.word	0xfe37e43c
 8004f80:	c2f8f359 	.word	0xc2f8f359
 8004f84:	81a56e1f 	.word	0x81a56e1f
 8004f88:	43500000 	.word	0x43500000
 8004f8c:	ffff3cb0 	.word	0xffff3cb0
 8004f90:	3c900000 	.word	0x3c900000
 8004f94:	00000000 	.word	0x00000000

08004f98 <floor>:
 8004f98:	ec51 0b10 	vmov	r0, r1, d0
 8004f9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004fa8:	2e13      	cmp	r6, #19
 8004faa:	460c      	mov	r4, r1
 8004fac:	4605      	mov	r5, r0
 8004fae:	4680      	mov	r8, r0
 8004fb0:	dc34      	bgt.n	800501c <floor+0x84>
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	da17      	bge.n	8004fe6 <floor+0x4e>
 8004fb6:	a332      	add	r3, pc, #200	@ (adr r3, 8005080 <floor+0xe8>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb f912 	bl	80001e4 <__adddf3>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f7fb fd54 	bl	8000a70 <__aeabi_dcmpgt>
 8004fc8:	b150      	cbz	r0, 8004fe0 <floor+0x48>
 8004fca:	2c00      	cmp	r4, #0
 8004fcc:	da55      	bge.n	800507a <floor+0xe2>
 8004fce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004fd2:	432c      	orrs	r4, r5
 8004fd4:	2500      	movs	r5, #0
 8004fd6:	42ac      	cmp	r4, r5
 8004fd8:	4c2b      	ldr	r4, [pc, #172]	@ (8005088 <floor+0xf0>)
 8004fda:	bf08      	it	eq
 8004fdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	e023      	b.n	800502e <floor+0x96>
 8004fe6:	4f29      	ldr	r7, [pc, #164]	@ (800508c <floor+0xf4>)
 8004fe8:	4137      	asrs	r7, r6
 8004fea:	ea01 0307 	and.w	r3, r1, r7
 8004fee:	4303      	orrs	r3, r0
 8004ff0:	d01d      	beq.n	800502e <floor+0x96>
 8004ff2:	a323      	add	r3, pc, #140	@ (adr r3, 8005080 <floor+0xe8>)
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	f7fb f8f4 	bl	80001e4 <__adddf3>
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2300      	movs	r3, #0
 8005000:	f7fb fd36 	bl	8000a70 <__aeabi_dcmpgt>
 8005004:	2800      	cmp	r0, #0
 8005006:	d0eb      	beq.n	8004fe0 <floor+0x48>
 8005008:	2c00      	cmp	r4, #0
 800500a:	bfbe      	ittt	lt
 800500c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005010:	4133      	asrlt	r3, r6
 8005012:	18e4      	addlt	r4, r4, r3
 8005014:	ea24 0407 	bic.w	r4, r4, r7
 8005018:	2500      	movs	r5, #0
 800501a:	e7e1      	b.n	8004fe0 <floor+0x48>
 800501c:	2e33      	cmp	r6, #51	@ 0x33
 800501e:	dd0a      	ble.n	8005036 <floor+0x9e>
 8005020:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005024:	d103      	bne.n	800502e <floor+0x96>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	f7fb f8db 	bl	80001e4 <__adddf3>
 800502e:	ec41 0b10 	vmov	d0, r0, r1
 8005032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005036:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800503a:	f04f 37ff 	mov.w	r7, #4294967295
 800503e:	40df      	lsrs	r7, r3
 8005040:	4207      	tst	r7, r0
 8005042:	d0f4      	beq.n	800502e <floor+0x96>
 8005044:	a30e      	add	r3, pc, #56	@ (adr r3, 8005080 <floor+0xe8>)
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f7fb f8cb 	bl	80001e4 <__adddf3>
 800504e:	2200      	movs	r2, #0
 8005050:	2300      	movs	r3, #0
 8005052:	f7fb fd0d 	bl	8000a70 <__aeabi_dcmpgt>
 8005056:	2800      	cmp	r0, #0
 8005058:	d0c2      	beq.n	8004fe0 <floor+0x48>
 800505a:	2c00      	cmp	r4, #0
 800505c:	da0a      	bge.n	8005074 <floor+0xdc>
 800505e:	2e14      	cmp	r6, #20
 8005060:	d101      	bne.n	8005066 <floor+0xce>
 8005062:	3401      	adds	r4, #1
 8005064:	e006      	b.n	8005074 <floor+0xdc>
 8005066:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800506a:	2301      	movs	r3, #1
 800506c:	40b3      	lsls	r3, r6
 800506e:	441d      	add	r5, r3
 8005070:	4545      	cmp	r5, r8
 8005072:	d3f6      	bcc.n	8005062 <floor+0xca>
 8005074:	ea25 0507 	bic.w	r5, r5, r7
 8005078:	e7b2      	b.n	8004fe0 <floor+0x48>
 800507a:	2500      	movs	r5, #0
 800507c:	462c      	mov	r4, r5
 800507e:	e7af      	b.n	8004fe0 <floor+0x48>
 8005080:	8800759c 	.word	0x8800759c
 8005084:	7e37e43c 	.word	0x7e37e43c
 8005088:	bff00000 	.word	0xbff00000
 800508c:	000fffff 	.word	0x000fffff

08005090 <_init>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr

0800509c <_fini>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	bf00      	nop
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr
